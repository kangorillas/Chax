/*
 *     Generated by class-dump 3.3.3 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "VideoConference.h"

/*
 * File: IMAVCore
 * UUID: 61F8F5F7-C680-35FD-9D2F-D0F4E33B6829
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 800.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Supported
 */

@class FetchICEDataOp, IMAVChatParticipant, VCCamera, VCMicrophone, VCSpeaker, NetworkCheckOperation, IMAVChatFeature, IMAVMicrophone;
@class VCChannel, VCChannelNegotiation, AVConference, DVDApplication, iTunesApplication, VCChannel, _GetVCChannelOp;

@protocol IMAVChatDelegate, IMAVChatTheaterDelegate, IMAVControllerDelegate;

@protocol AVConferenceDelegate
- (void)conference:(id)arg1 receivedNoRemotePacketsForTime:(double)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 didStartSession:(BOOL)arg2 withUserInfo:(id)arg3;
- (void)conference:(id)arg1 didStopWithCallID:(long long)arg2 error:(id)arg3;
- (void)conference:(id)arg1 updateInputMeterLevel:(float)arg2;
- (void)conference:(id)arg1 updateOutputMeterLevel:(float)arg2;
- (void)conference:(id)arg1 receivedFirstPreviewForCallID:(long long)arg2;
- (void)conference:(id)arg1 receivedFirstRemoteFrameForCallID:(long long)arg2;
- (void)conference:(id)arg1 remoteScreenAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteAudioPaused:(BOOL)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoPaused:(BOOL)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 inititiateRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)conference:(id)arg1 sendRelayUpdate:(long long)arg2 updateDict:(id)arg3;
- (void)conference:(id)arg1 cancelRelayRequest:(long long)arg2 requestDict:(id)arg3;

@optional
- (void)conference:(id)arg1 didStartSession:(BOOL)arg2 withCallID:(long long)arg3 error:(id)arg4;
@end

@interface IMExtendedOperation : NSOperation
{
    NSThread *_operationThread;
    NSString *_operationName;
    unsigned long long _operationState;
    double _operationTimeout;
    NSMutableSet *_childOperations;
}

+ (id)runLoopModes;
- (void)dealloc;
- (void)_setState:(unsigned long long)arg1;
- (unsigned long long)_maxChildOperationState;
- (unsigned long long)_minChildOperationState;
- (void)_startThread;
- (void)start;
- (void)_threadedMain;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)addChildOperation:(id)arg1;
- (void)createChildOperations;
- (void)didFinish;
@property(retain, nonatomic) NSString *name;
@property(nonatomic) double timeout;
- (void)_stopWithState:(unsigned long long)arg1;
- (void)_timeout;
- (void)fail;
- (void)cancel;
@property(readonly, nonatomic) unsigned long long state;
- (BOOL)isConcurrent;
- (BOOL)isExecuting;
- (BOOL)isFinished;

@end

@interface AVChatCancelInvitationOp : IMExtendedOperation
{
    IMHandle *_imHandle;
    NSString *_conferenceID;
    unsigned int _sessionID;
}

- (id)initWithIMHandle:(id)arg1 avChat:(id)arg2;
- (void)dealloc;
- (void)didFinish;

@end

@interface AVChatNegotiationOp : IMExtendedOperation
{
    NSMutableDictionary *_result;
    FetchICEDataOp *_fetchICEDataOp;
    IMAVChatParticipant *_participant;
    IMExtendedOperation *_ardChannelOp;
    NSString *_conferenceID;
    NSDictionary *_extraContext;
    unsigned int _useICE:1;
}

- (id)initWithParticipant:(id)arg1 conferenceID:(id)arg2;
- (void)dealloc;
- (void)createChildOperations;

@end

@interface AVChatResponseOp : AVChatNegotiationOp
{
    NSDictionary *_callerProperties;
    unsigned int _response;
    unsigned int _sessionID;
}

- (void)dealloc;
- (id)initWithParticipant:(id)arg1 response:(unsigned int)arg2 conferenceID:(id)arg3;
- (void)createChildOperations;
- (void)_sendMessageToBuddy:(id)arg1 result:(id)arg2;
- (void)didFinish;
- (void)main;

@end

@interface AVChatCounterProposalOp : AVChatResponseOp
{
}

- (void)_sendMessageToBuddy:(id)arg1 result:(id)arg2;

@end

@interface AVChatInvitationOp : AVChatNegotiationOp
{
    NSMutableDictionary *_inviteesInfo;
    BOOL _audioOnly;
}

- (id)initWithParticipant:(id)arg1 conferenceID:(id)arg2;
- (void)dealloc;
- (void)createChildOperations;
- (void)didFinish;
- (void)main;

@end

@interface AVChatParticipantStatusNugget : NSObject <NSCoding>
{
    NSString *_imHandleName;
    NSString *_imHandleID;
    NSString *_invitedBy;
    NSString *_vcPartyID;
    BOOL _sendingAudio;
    BOOL _sendingVideo;
    BOOL _usingICE;
    unsigned int _ardRole;
    unsigned int _state;
    int _error;
    unsigned int _reason;
}

+ (id)filterNuggets:(id)arg1 filterEndedState:(BOOL)arg2 convertFromDict:(BOOL)arg3;
+ (id)nuggetWithDictionaryDescription:(id)arg1;
- (id)initWithParticipant:(id)arg1;
- (void)_configureWithDictionaryDescription:(id)arg1;
@property(readonly, nonatomic) NSDictionary *dictionaryDescription;
- (void)dealloc;
@property(readonly, nonatomic) NSString *name;
@property(readonly, nonatomic) NSString *ID;
@property(readonly, nonatomic) NSString *invitedBy;
@property(readonly, nonatomic) NSString *vcPartyID;
@property(readonly, nonatomic) BOOL sendingAudio;
@property(readonly, nonatomic) BOOL sendingVideo;
@property(readonly, nonatomic) BOOL isUsingICE;
@property(readonly, nonatomic) unsigned int ardRole;
@property(readonly, nonatomic) unsigned int state;
@property(readonly, nonatomic) int error;
@property(readonly, nonatomic) unsigned int reason;
- (void)setVCPartyID:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface AVChatUpdateOp : IMExtendedOperation
{
    IMHandle *_imHandle;
    NSString *_conferenceID;
    NSData *_updateData;
}

- (id)initWithIMHandle:(id)arg1 data:(id)arg2 avChat:(id)arg3;
- (void)dealloc;
- (void)didFinish;

@end

@interface FZVideoConferenceController : VideoConferenceMultiController <IMSystemMonitorListener>
{
    int _initStatus;
    BOOL _everOpenedCamera;
    BOOL _openCameraRequired;
    BOOL _recacheSelectedCamera;
    VCCamera *_cachedSelectedCamera;
    int _localVideoClientCount;
    int _localAudioClientCount;
    int _audioReflectorClientCount;
    BOOL _restartPreviewAtWake;
    BOOL _openCameraAtWake;
}

+ (void)_clearCachedMicrophoneList;
+ (id)cachedMicrophoneList;
+ (void)setAuxVideoController:(id)arg1;
+ (void)setVideoProcessor:(id)arg1;
+ (BOOL)hasBeenInitialized;
+ (id)sharedInstance;
+ (void)initialize;
+ (id)newcameraList;
+ (void)vcMicrophoneChanged:(id)arg1;
+ (BOOL)_updateSoftwareInputForCameras:(id)arg1 mics:(id)arg2;
+ (void)vcHardwareChanged:(id)arg1 duringLaunch:(BOOL)arg2;
+ (void)systemWillSleep;
+ (void)systemDidWake;
+ (void)vcHardwareChangedBroadcastChanges:(id)arg1;
+ (void)_enableSoftwareCamera;
+ (void)_disableSoftwareCamera:(id)arg1;
+ (void)_enableSoftwareMicrophone;
+ (void)_disableSoftwareMicrophone:(id)arg1;
+ (void)broadcastVCCapabilites;
- (void)setDelegate:(id)arg1;
@property(readonly, nonatomic) BOOL isVCCReady;
- (void)initVCC;
- (void)_initVCCOnThread:(id)arg1;
- (void)_initVCCDidFinishNotification:(id)arg1;
- (void)_doInitVCCDidFinish;
- (void)shutdownAV;
- (id)init;
- (void)dealloc;
- (void)_postPrefsChangedNotification:(id)arg1;
- (void)_hardwareCapsNotification:(id)arg1;
- (void)cameraAvailable:(char *)arg1 MicrophoneAvailable:(char *)arg2;
- (unsigned long long)vcCapabilities;
- (unsigned long long)basicVCCapabilitiesCanAudio:(char *)arg1 canVideo:(char *)arg2;
- (void)systemWillSleep;
- (void)systemDidWake;
- (void)_removedClient;
- (BOOL)addLocalVideoClient;
- (BOOL)removeLocalVideoClient;
- (void)addLocalAudioClient;
- (void)removeLocalAudioClient;
- (void)restartPreviewIfNecessary;
- (BOOL)startReflector;
- (BOOL)stopReflector;
- (void)setWidescreenEnabled:(BOOL)arg1;
- (id)preferredMic:(id)arg1;
- (BOOL)setPreferredMic;
- (BOOL)selectMicrophone:(id)arg1;
- (id)_defaultMicrophoneFromList:(id)arg1;
- (id)_UIDFromMicrophone:(id)arg1;
- (void)_selectSoundOutputDevice;
- (BOOL)selectSoundOutputDevice:(id)arg1;
@property(readonly, nonatomic) NSString *soundOutputdeviceNamePref;
- (void)setSystemMute:(BOOL)arg1;
@property(readonly, nonatomic) BOOL haveBluetooth;
@property(readonly, nonatomic) VCMicrophone *bluetoothHeadsetMic;
@property(readonly, nonatomic) VCSpeaker *bluetoothHeadsetSpeaker;
@property(readonly, nonatomic) BOOL haveBluetoothHeadset;
@property(readonly, nonatomic) BOOL usingBluetoothHeadset;
- (BOOL)setUsingBluetoothHeadset:(BOOL)arg1;
- (BOOL)openCamera;
- (void)__iChatCancelPreview;
- (int)cancelPreview;
- (void)__iChatCloseCamera;
- (BOOL)closeCamera;
- (id)realCameraInList:(id)arg1;
@property(readonly, nonatomic) BOOL currentCameraIsQ8;
@property(readonly, nonatomic) BOOL currentCameraIsWidescreen;
@property(readonly, nonatomic) BOOL getCameraIrisState;
@property(readonly, nonatomic) BOOL getMicrophoneIrisState;
- (BOOL)pauseVideoIfIrisClosed;
- (BOOL)selectVCCamera:(id)arg1 andUpdatePref:(BOOL)arg2;
- (BOOL)selectVCCamera:(id)arg1;
- (void)_selectCamera;
- (id)_defaultCameraFromList:(id)arg1;
- (void)forceCameraRecache;
- (id)selectedMicrophone;
- (id)selectedCamera;
- (void)setCameraSettingsFromDefaults;
- (BOOL)setColor:(float)arg1;
- (float)color;
- (BOOL)setBrightness:(float)arg1;
- (float)brightness;
- (BOOL)setContrast:(float)arg1;
- (float)contrast;
- (BOOL)setFocus:(float)arg1;
- (float)focus;
- (BOOL)setSharpness:(float)arg1;
- (float)sharpness;
- (int)lightingProfile;

@end

@interface FetchICEDataOp : IMExtendedOperation
{
    NetworkCheckOperation *_networkCheckOp;
    IMAVChatParticipant *_participant;
    NSData *_ICEData;
}

- (id)initWithParticipant:(id)arg1;
- (void)dealloc;
- (void)createChildOperations;
- (void)main;
- (id)ICEData;
- (id)networkCheckOperation;

@end

@interface IMAVCallManager : NSObject
{
    unsigned int _callState;
    unsigned int _telephonyCallState;
    unsigned int _globalCallState;
    NSMutableArray *_chatArray;
}

+ (id)sharedInstance;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (id)init;
@property(readonly, retain, nonatomic) NSArray *calls;
@property(readonly, retain, nonatomic) NSArray *_FTCalls;
- (id)_nonRetainingChatList;
- (void)_postStateChangeNamed:(id)arg1 fromState:(unsigned int)arg2 toState:(unsigned int)arg3;
- (void)_postStateChangeIfNecessary;
@property(nonatomic, setter=_setCallState:) unsigned int _callState;
- (void)__setTelephonyCallState:(unsigned int)arg1;
@property(nonatomic, setter=_setTelephonyCallState:) unsigned int _telephonyCallState; // @synthesize _telephonyCallState;
@property(readonly, nonatomic) unsigned int callState;
- (void)_updateOverallChatState;

@end

@interface IMAVCamera : NSObject
{
    id _internalDevice;
}

- (id)_initWithFTCamera:(id)arg1;
- (id)init;
@property(readonly, retain, nonatomic) NSString *name;
@property(readonly, nonatomic) long long cameraStyle;
@property(readonly, nonatomic) BOOL isWideScreen;
@property(readonly, nonatomic) BOOL hasShutter;
@property(readonly, nonatomic) BOOL isSuspended;
@property(readonly, nonatomic) BOOL isShutterOpen;
- (id)_FTCamera;
@property(readonly, retain, nonatomic) NSString *uniqueID;
- (void)dealloc;
- (id)description;

@end

@interface IMAVCameraController : NSObject
{
    NSMutableArray *_cameras;
}

+ (id)sharedInstance;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (id)init;
- (void)dealloc;
@property(readonly, retain, nonatomic) NSArray *cameras;
- (void)_rebuildCameraList;
- (void)cameraListDidChange;
- (void)_loadSavedCamera;
@property(retain, nonatomic) IMAVCamera *currentCamera;

@end

@interface IMAVChat : NSObject <IMSystemMonitorListener>
{
    NSString *_GUID;
    NSString *_conferenceID;
    NSMutableArray *_participants;
    IMHandle *_initiator;
    IMAVChatParticipant *_localParticipant;
    NSNumber *_natType;
    NSMutableDictionary *_extraServerContext;
    NSDictionary *_errorDict;
    NSDate *_dateCreated;
    NSDate *_dateStartedConnecting;
    NSDate *_dateConnected;
    NSDate *_dateEnded;
    NSString *_participantNames;
    NSData *_connectData;
    NSDictionary *_callerProperties;
    NSMutableDictionary *_unknownPartyStates;
    struct dispatch_queue_s *_queue;
    NSTimer *_firstFrameTimeoutTimer;
    NSTimer *_inviteTimeoutTimer;
    NSTimer *_connectionTimeoutTimer;
    NSTimer *_breakBeforeMakeTimeoutTimer;
    NSTimer *_screenSaverBlockingTimer;
    id _conferenceController;
    id _delegate;
    id _theaterDelegate;
    long long _callID;
    unsigned int _sessionID;
    unsigned int _addStatus;
    NSError *_error;
    int _addableParticipants;
    unsigned int _localState;
    unsigned int _lastPostedState;
    IMPair *_pendingPreemptiveRelayInitate;
    NSString *_callStatisticsGUID;
    struct CGSize _portraitAspectRatios;
    struct CGSize _landscapeAspectRatios;
    double _connectionTimeoutTime;
    double _invitationTimeoutTime;
    BOOL _hasGatheredInfo;
    BOOL _hasReceivedFirstFrame;
    BOOL _silentConference;
    BOOL _isListening;
    BOOL _isCounterProposalConnect;
    BOOL _hasPendingAccept;
    BOOL _hasPendingInit;
    BOOL _isTerminating;
    BOOL _needToSendEndConferenceNotification;
    BOOL _Q8IrisOpen;
    BOOL _usingCoercedIDs;
    BOOL _suppressBeginChat;
    BOOL _isCaller;
    BOOL _isVideo;
    BOOL _dataOut;
    BOOL _dataIn;
    BOOL _didRemoteMute;
    BOOL _didRemotePause;
    BOOL _remoteNetworkStall;
    BOOL _participantOrderFinal;
    int _connectionType;
    BOOL _localCell;
    BOOL _remoteCell;
    long long _ardRole;
    IMAVChatFeature *_recorder;
    IMAVChatFeature *_auxVideo;
    IMAVChatFeature *_ard;
}

+ (id)allowedClassesForArchives;
+ (int)systemSupportsNewOutgoingConferenceTo:(id)arg1 isVideo:(BOOL)arg2;
+ (int)systemSupportsNewOutgoingConferenceTo:(id)arg1 isVideo:(BOOL)arg2 isARD:(BOOL)arg3;
+ (double)defaultInvitationTimeoutTime;
+ (void)setDefaultInvitationTimeoutTime:(double)arg1;
+ (double)defaultConnectionTimeoutTime;
+ (void)setDefaultConnectionTimeoutTime:(double)arg1;
+ (void)_doSendUpdate;
+ (void)_sendUpdate;
+ (id)currentAVChatInfo;
+ (void)getVideoStillForIMHandle:(id)arg1 data:(id *)arg2 result:(unsigned int *)arg3;
+ (BOOL)isStateFinal:(unsigned int)arg1;
+ (BOOL)isStateActive:(unsigned int)arg1;
+ (int)maxRemoteParticipantsVideo:(BOOL)arg1;
+ (id)_avChatArray;
+ (id)chatWithSessionID:(unsigned int)arg1;
+ (id)chatList;
+ (id)connectedChat;
+ (id)activeChat;
+ (id)nonFinalChat;
+ (id)avChatWithConferenceID:(id)arg1;
+ (id)incomingInvitations;
+ (id)outgoingInvitations;
+ (id)connectingChats;
+ (id)connectedChats;
+ (id)chatsWithIMAVChatState:(unsigned int)arg1;
+ (id)bestGuessAVChatWithIMHandle:(id)arg1 conferenceID:(id)arg2 sessionID:(unsigned int)arg3 properties:(id)arg4;
+ (BOOL)_anyOfTheseParticipants:(id)arg1 matchAnyOfTheseIMHandles:(id)arg2;
+ (BOOL)isIMHandleInActiveConference:(id)arg1;
+ (id)avChatInvitedByIMHandle:(id)arg1 orConferenceID:(id)arg2;
+ (id)avChatWaitingForReplyFromIMHandle:(id)arg1 orConferenceID:(id)arg2;
+ (id)avChatWithMatchingIMHandles:(id)arg1 video:(BOOL)arg2 ARDRole:(long long)arg3;
- (id)initPersistentAVChatWith:(id)arg1 invitedBy:(id)arg2 ARDRole:(int)arg3 sessionID:(unsigned int)arg4 video:(BOOL)arg5;
- (void)_determineDataIn;
- (id)_initWith:(id)arg1 invitedBy:(id)arg2 ARDRole:(int)arg3 sessionID:(unsigned int)arg4 video:(BOOL)arg5 extraProperties:(id)arg6;
- (id)initIncomingFrom:(id)arg1 isVideo:(BOOL)arg2 callerProperties:(id)arg3;
- (id)initOutgoingTo:(id)arg1 isVideo:(BOOL)arg2 ARDRole:(long long)arg3;
- (id)initOutgoingTo:(id)arg1 isVideo:(BOOL)arg2;
- (void)dealloc;
- (id)description;
- (void)beginChat;
- (void)endChat;
- (void)endChatWithReason:(unsigned int)arg1;
- (void)endChatWithError:(int)arg1;
- (void)_endChatWithReason:(unsigned int)arg1 andError:(int)arg2;
- (void)endChatWithReason:(unsigned int)arg1 error:(int)arg2;
- (id)inviteesInfoAsPlist:(BOOL)arg1 account:(id)arg2;
- (void)inviteAll;
- (void)_cancelInvitationWithReason:(unsigned int)arg1 error:(int)arg2;
- (void)cancelInvitation;
- (void)_sendVCUpdateTo:(id)arg1 skipConnected:(BOOL)arg2;
- (void)invite:(id)arg1;
- (void)acceptInvitation;
- (void)declineInvitationWithResponse:(unsigned int)arg1;
- (void)declineInvitation;
- (void)sendARDFileTransferAuthorization:(id)arg1 to:(id)arg2;
- (void)_setStateDisconnected;
- (void)_connectTo:(id)arg1 withData:(id)arg2;
- (void)_prepareConnectionForParticipant:(id)arg1;
- (void)_mainThreadFinishPrepareConnectionForInvitedParty:(id)arg1;
- (void)_threadedPrepareConnectionForInvitedParty:(id)arg1;
- (BOOL)_checkVCResponseDict:(id)arg1;
- (void)_counterPropose:(id)arg1;
- (void)_responseToVCInvite:(id)arg1;
- (void)_VCCounterProposal:(id)arg1;
- (void)handleGenericAVMessageFromParticipant:(id)arg1 type:(unsigned int)arg2 userInfo:(id)arg3;
- (void)_subscribeToVCNotifications;
- (void)_imHandleStatusChanged:(id)arg1;
- (void)_initiatorInfoChanged:(id)arg1;
- (void)_inviteeInfoChanged:(id)arg1;
- (void)_participantsChanged:(id)arg1;
- (void)handleVideoConferenceNotification:(id)arg1;
- (void)invalidateParticipantNames;
@property(readonly, nonatomic) NSString *participantNames;
- (id)participantWithID:(id)arg1;
- (id)vcPartyIDForIMHandle:(id)arg1;
- (id)participantMatchingIMHandle:(id)arg1;
@property(nonatomic, assign) id <IMAVChatDelegate> delegate;
@property(nonatomic, assign) id <IMAVChatTheaterDelegate> theaterDelegate;
@property(retain, nonatomic, setter=_setCallerProperties:) NSDictionary *callerProperties; // @synthesize callerProperties=_callerProperties;
@property(readonly, retain, nonatomic) IMHandle *otherIMHandle;
@property(readonly, retain, nonatomic) IMAccount *account;
@property(readonly, nonatomic) BOOL isOneWay;
@property(readonly, nonatomic) BOOL isVideo;
@property(readonly, nonatomic) BOOL isAOLInterop;
@property(readonly, nonatomic) NSDictionary *vcErrorReport;
@property(retain, nonatomic, setter=_setConferenceID:) NSString *conferenceID; // @synthesize conferenceID=_conferenceID;
@property(nonatomic, setter=setCallID:) long long callID; // @synthesize callID=_callID;
@property(readonly, nonatomic) int endedError;
@property(readonly, nonatomic) unsigned int endedReason;
- (void)_setCreationDate;
- (id)error;
- (void)_handleAVError:(id)arg1;
@property(readonly, nonatomic) NSDictionary *errorDictionary;
- (void)_setErrorDictionary:(id)arg1;
- (void)_reportError:(id)arg1;
- (void)_postNotificationName:(id)arg1 userInfo:(id)arg2;
- (void)_postNotificationName:(id)arg1 participant:(id)arg2 userInfo:(id)arg3;
- (void)_noteFirstFrame;
@property(readonly, retain) NSDictionary *_extraServerContext; // @synthesize _extraServerContext;
@property(readonly, retain, nonatomic) NSArray *participants; // @synthesize participants=_participants;
@property(readonly, retain, nonatomic) IMAVChatParticipant *localParticipant; // @synthesize localParticipant=_localParticipant;
@property(readonly, nonatomic) unsigned int state; // @synthesize state=_localState;
@property(readonly, nonatomic) unsigned int addStatus; // @synthesize addStatus=_addStatus;
@property(readonly, nonatomic) int addableParticipants; // @synthesize addableParticipants=_addableParticipants;
@property(readonly, nonatomic) NSDate *dateEnded; // @synthesize dateEnded=_dateEnded;
@property(readonly, nonatomic) NSDate *dateCreated; // @synthesize dateCreated=_dateCreated;
@property(readonly, nonatomic) NSDate *dateConnected; // @synthesize dateConnected=_dateConnected;
@property(nonatomic, assign, setter=_setConferenceController:) id _conferenceController; // @synthesize _conferenceController;
@property(retain, nonatomic, setter=setGUID:) NSString *GUID; // @synthesize GUID=_GUID;
@property(readonly, nonatomic) BOOL dataIn; // @synthesize dataIn=_dataIn;
@property(readonly, nonatomic) BOOL dataOut; // @synthesize dataOut=_dataOut;
@property(readonly, nonatomic) BOOL isCaller; // @synthesize isCaller=_isCaller;
@property(setter=setConferenceSilent:) BOOL isConferenceSilent; // @synthesize isConferenceSilent=_silentConference;
@property(nonatomic, setter=_setRemoteCell:) BOOL _remoteCell; // @synthesize _remoteCell;
@property(nonatomic, setter=_setLocalCell:) BOOL _localCell; // @synthesize _localCell;
@property(retain, nonatomic, setter=_setNatType:) NSNumber *_natType; // @synthesize _natType;
@property(readonly, retain, nonatomic) IMHandle *initiatorIMHandle; // @synthesize initiatorIMHandle=_initiator;
@property(readonly, nonatomic) unsigned int sessionID; // @synthesize sessionID=_sessionID;
@property(readonly, nonatomic) BOOL isQ8IrisOpen; // @synthesize isQ8IrisOpen=_Q8IrisOpen;
@property(retain, nonatomic, setter=_setCallStatisticsGUID:) NSString *_callStatisticsGUID; // @synthesize _callStatisticsGUID;
@property(nonatomic, setter=_setConnectionType:) int _connectionType; // @synthesize _connectionType;
@property(readonly, nonatomic) struct dispatch_queue_s *_queue; // @synthesize _queue;
@property(nonatomic) void *localVideoLayer;
@property(nonatomic) void *localVideoBackLayer;
- (BOOL)openCamera;
- (BOOL)closeCamera;
- (BOOL)startPreviewWithError:(id *)arg1;
- (BOOL)stopPreview;
- (void)_postParticipantMediaChangeNotification:(id)arg1 cameraChanged:(BOOL)arg2 orientationChanged:(BOOL)arg3 aspectChanged:(BOOL)arg4 cameraWillSwitch:(BOOL)arg5 camera:(unsigned int)arg6 orientation:(unsigned int)arg7 aspect:(struct CGSize)arg8;
@property(nonatomic) unsigned int cameraType;
@property(nonatomic) unsigned int cameraOrientation;
@property(nonatomic) BOOL lockCamera;
- (struct CGSize)localAspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
- (void)setLocalAspectRatio:(struct CGSize)arg1 cameraOrientation:(unsigned int)arg2 cameraType:(unsigned int)arg3;
- (id)_callLoggingOutput;
- (void)_clearConnectionTimeoutTimer;
- (void)_setConnectionTimeoutTimer;
- (void)_connectionTimeout:(id)arg1;
- (void)_clearInvitationTimeoutTimer;
- (void)_setInvitationTimeoutTimer;
- (void)_invitationTimeout:(id)arg1;
- (void)_clearScreenSaverBlockingTimer;
- (void)_setScreenSaverBlockingTimer;
- (void)_clearFirstFrameTimeoutTimer;
- (void)_setFirstFrameTimeoutTimer;
- (void)_firstFrameTimeout:(id)arg1;
- (void)_clearBreakBeforeMakeTimer;
- (void)_setBreakBeforeMakeTimer;
- (void)_breakBeforeMakeTimer:(id)arg1;
@property(nonatomic) double invitationTimeoutTime;
@property(nonatomic) double connectionTimeoutTime;
- (void)_blockScreenSaver:(id)arg1;
- (void)_unknownParty:(id)arg1 didConnect:(BOOL)arg2;
- (void)_unknownParty:(id)arg1 muteOrPause:(unsigned int)arg2 didChange:(BOOL)arg3;
- (void)conferencePersonWithID:(id)arg1 completedWithInfo:(id)arg2;
- (void)conferenceHungUpByPersonWithID:(id)arg1;
- (void)conferencePersonWithID:(id)arg1 didConnect:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didCancel:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didMute:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didPause:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didStall:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 hasInfoForInsufficientBandwidth:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 hasInfoForNoPackets:(id)arg2;
- (void)conferenceHasVideoError;
- (void)conferenceHasTimedOut;
- (BOOL)shouldConferenceAcceptIncomingRequestFromUser:(id)arg1 onLocalSubnetOnly:(char *)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayRequest:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayUpdate:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayCancel:(id)arg2;
- (void)_configureVCC;
- (void)_configureVCCRecv;
- (void)connectProc:(id)arg1;
- (void)_noteConferenceConnected:(id)arg1;
- (void)startVCOnMainThread:(id)arg1;
- (void)_vccInitDidFinish;
- (BOOL)shouldConferenceAcceptAuxVideoFromUser:(id)arg1;
- (void)conferencePersonWithID:(id)arg1 approvedAuxVideo:(BOOL)arg2;
- (void)auxVideoBeganForPersonWithID:(id)arg1;
- (void)auxVideoEndedForPersonWithID:(id)arg1;
@property(nonatomic, setter=setPaused:) BOOL isPaused;
- (void)togglePaused;
@property(nonatomic, setter=setRemotePaused:) BOOL isRemotePaused;
- (void)toggleRemotePaused;
@property(readonly, nonatomic) BOOL isChatPaused;
- (void)toggleChatPaused;
@property(readonly, nonatomic) BOOL didRemotePause;
@property(nonatomic) BOOL isSendingVideo;
@property(nonatomic) BOOL allowsVideo;
- (void)toggleSendingVideo;
- (BOOL)isLocalNetworkStalled;
- (BOOL)isRemoteNetworkStalled;
@property(nonatomic, setter=setMute:) BOOL isMute;
- (void)toggleMute;
@property(nonatomic, setter=setRemoteMute:) BOOL isRemoteMute;
- (void)toggleRemoteMute;
@property(readonly, nonatomic) BOOL isChatMute;
- (void)toggleChatMute;
@property(readonly, nonatomic) BOOL didRemoteMute;
@property(nonatomic) BOOL isSendingAudio;
- (void)toggleSendingAudio;
@property(nonatomic) float audioVolume;
- (void)_handleRelayInitate:(id)arg1 fromParticipant:(id)arg2;
- (void)_handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2;
- (void)_handleRelayCancel:(id)arg1 fromParticipant:(id)arg2;
- (void)_relayPropose:(id)arg1;
@property(readonly, nonatomic) BOOL canUseRelay; // @dynamic canUseRelay;
- (int)_initialRelayStatus;
- (id)_currentAVChatInfo;
@property(readonly, nonatomic) BOOL isStateFinal; // @dynamic isStateFinal;
@property(readonly, nonatomic) BOOL isActive; // @dynamic isActive;
- (void)_setActiveConference;
- (void)participant:(id)arg1 changedFromState:(unsigned int)arg2 toState:(unsigned int)arg3;
- (void)_postStateToDelegateIfNecessary;
- (void)systemDidFastUserSwitchOut;
- (void)notifySystemVC:(BOOL)arg1;
- (void)_peerID:(id)arg1 changedTo:(id)arg2;
- (void)_updateIMHandleInBuddyList:(id)arg1;
- (void)_noteStatusChangesForParticipant:(id)arg1;
- (void)_insertRemoteParticipant:(id)arg1 atIndex:(unsigned long long)arg2;
- (BOOL)_moveVCPartyID:(id)arg1 toIndex:(unsigned int)arg2 inCount:(unsigned int)arg3;
- (void)_finalizeParticipantOrder:(id)arg1 andNotify:(BOOL)arg2;
- (id)participantsNotInNuggets:(id)arg1;
- (void)_updateParticipantsWithData:(id)arg1;
- (BOOL)_imHandlesRequireCoercedIDs:(id)arg1;
- (void)_initParticipantsWithIMHandles:(id)arg1;
- (void)_initParticipantsWithNuggets:(id)arg1;
- (void)_noteInviteDeliveredForParticipant:(id)arg1;
- (BOOL)_participantsCheckOut;
@property(readonly, retain, nonatomic) IMAVChatParticipant *initiatorParticipant; // @dynamic initiatorParticipant;
@property(readonly, retain, nonatomic) NSArray *remoteParticipants; // @dynamic remoteParticipants;
@property(readonly, nonatomic) int numActiveParticipants; // @dynamic numActiveParticipants;
@property(readonly, nonatomic) BOOL _allParticipantsUsingICE;
- (void)_refreshAddableParticipants;
- (id)_participantMatchingVCPartyID:(id)arg1;
- (id)stringForAddStatus:(unsigned int)arg1;
- (id)stringForAddStatus;
- (unsigned int)addStatusForIMHandle:(id)arg1 asVideo:(BOOL)arg2 ardRole:(int)arg3;
- (BOOL)canAddIMHandle:(id)arg1;
- (void)removeParticipantWithID:(id)arg1;
- (id)orderedRemotePartyIDs;
- (void)finalizeOrderWithVideoFrom:(id)arg1;
- (void)_setServerContextString:(id)arg1 forKey:(id)arg2;
- (void)_removeServerContextString:(id)arg1;
- (id)_serverContextStringForKey:(id)arg1;

@end

@interface IMAVChatFeature : NSObject
{
    IMAVChat *_avChat;
}

- (id)initWithAVChat:(id)arg1;
- (void)dealloc;
- (void)delegateChangedTo:(id)arg1;
- (BOOL)hasAddableParticipantsOtherwiseStatus:(unsigned int *)arg1;
- (BOOL)handleGenericAVMessageFromParticipant:(id)arg1 type:(unsigned int)arg2 userInfo:(id)arg3;
- (void)participant:(id)arg1 changedFromState:(unsigned int)arg2 toState:(unsigned int)arg3;
- (unsigned int)addStatusForIMHandle:(id)arg1 asVideo:(BOOL)arg2 ardRole:(int)arg3;
- (void)participantRemoved:(id)arg1;
- (void)participantInvited:(id)arg1;
- (void)conferenceEndedWithReason:(unsigned int)arg1 andError:(int)arg2;
@property(assign, setter=setAVChat:) IMAVChat *avChat; // @synthesize avChat=_avChat;

@end

@interface IMAVChatParticipant : NSObject
{
    int _ardRole;
    BOOL _ARDAuthorized;
    VCChannel *_ARDChannel;
    VCChannelNegotiation *_ARDChannelNegotiation;
    NSData *_ARDEncryptionKey;
    NSMutableDictionary *_incomingVCChannelNegotiations;
    NSMutableDictionary *_outgoingVCChannelNegotiations;
    NSMutableIndexSet *_ARDFileTransferUsedIndexes;
    unsigned int _ARDFileTransferIndex;
    unsigned int _state;
    BOOL _sendingAudio;
    BOOL _sendingVideo;
    NSData *_localICEData;
    BOOL _sendingAuxVideo;
    BOOL _audioMuted;
    BOOL _videoPaused;
    BOOL _isAOLInterop;
    BOOL _usingICE;
    BOOL _networkStalled;
    BOOL _isRecording;
    NSString *_vcPartyID;
    int _avRelayStatus;
    unsigned int _cameraType;
    unsigned int _cameraOrientation;
    IMHandle *_imHandle;
    IMHandle *_inviter;
    IMAVChat *_avChat;
    BOOL _isInitiator;
    unsigned int _chatEndedReason;
    int _chatError;
    NSDictionary *_properties;
    NSDictionary *_preemptiveRelayRequest;
    NSDictionary *_preemptiveRelayUpdate;
    NSData *_remoteICEData;
    NSOperationQueue *_messagingQueue;
    NSString *_conferenceID;
    struct CGSize _remotePortraitOrientation;
    struct CGSize _remoteLandscapeOrientation;
    NSString *_rawErrorString;
    NSString *_errorString;
    BOOL _inviteDelivered;
    NSTimer *_connectTimeoutTimer;
    struct CGSize _remotePIPPortraitOrientation;
    struct CGSize _remotePIPLandscapeOrientation;
}

- (id)init;
- (id)_initAs:(id)arg1 invitedBy:(id)arg2 sendingAudio:(BOOL)arg3 sendingVideo:(BOOL)arg4 usingICE:(BOOL)arg5 toChat:(id)arg6 inState:(unsigned int)arg7 withError:(int)arg8 andReason:(unsigned int)arg9 andVCPartyID:(id)arg10 account:(id)arg11;
- (id)initAs:(id)arg1 invitedBy:(id)arg2 toChat:(id)arg3 account:(id)arg4;
- (id)initWithStatusNugget:(id)arg1 andChat:(id)arg2 account:(id)arg3;
- (id)initAs:(id)arg1 invitedBy:(id)arg2 ARDRole:(int)arg3 toChat:(id)arg4 account:(id)arg5;
- (void)disconnectFromAVChat;
- (id)description;
- (void)dealloc;
@property(readonly, retain, nonatomic) NSString *name;
@property(readonly, nonatomic) BOOL isLocalParticipant;
- (id)statusNugget;
- (void)requestIconIfNecessary;
@property(assign, nonatomic) NSData *remoteICEData; // @synthesize remoteICEData=_remoteICEData;
- (id)getLocalICEData;
- (id)rebuildLocalICEData;
- (void)_handleIMAVResponse:(unsigned int)arg1;
- (void)_noteInviteDelivered;
@property(nonatomic) unsigned int state; // @synthesize state=_state;
- (void)setStateToEndedWithReason:(unsigned int)arg1 andError:(int)arg2;
- (void)_setState:(unsigned int)arg1 withReason:(unsigned int)arg2 andError:(int)arg3;
- (void)_processPropertyUpdate:(id)arg1;
- (void)_updateProperties:(id)arg1;
@property(retain, nonatomic, setter=_setConferenceID:) NSString *_conferenceID; // @synthesize _conferenceID;
- (void)_switchToUseNewIMHandle:(id)arg1;
- (id)ARDChannelNegotiation;
- (BOOL)createVCChannelRequestWithInfo:(id)arg1 isUpgrade:(BOOL)arg2;
- (void)sendAVMessage:(unsigned int)arg1 userInfo:(id)arg2;
- (struct CGSize)aspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
- (struct CGSize)localAspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
@property(nonatomic, setter=_setRemotePIPLandscapeOrientation:) struct CGSize _remotePIPLandscapeOrientation; // @synthesize _remotePIPLandscapeOrientation;
@property(nonatomic, setter=_setRemotePIPPortraitOrientation:) struct CGSize _remotePIPPortraitOrientation; // @synthesize _remotePIPPortraitOrientation;
@property(retain, setter=_setConnectTimeoutTimer:) NSTimer *_connectTimeoutTimer; // @synthesize _connectTimeoutTimer;
@property(setter=_setInviteDelivered:) BOOL _inviteDelivered; // @synthesize _inviteDelivered;
@property(retain, setter=_setErrorString:) NSString *_errorString; // @synthesize _errorString;
@property(retain, setter=_setRawErrorString:) NSString *_rawErrorString; // @synthesize _rawErrorString;
@property(nonatomic, setter=_setRemoteLandscapeOrientation:) struct CGSize _remoteLandscapeOrientation; // @synthesize _remoteLandscapeOrientation;
@property(nonatomic, setter=_setRemotePortraitOrientation:) struct CGSize _remotePortraitOrientation; // @synthesize _remotePortraitOrientation;
@property(retain, nonatomic, setter=_setMessagingQueue:) NSOperationQueue *_messagingQueue; // @synthesize _messagingQueue;
@property(retain, nonatomic, setter=_setPreemptiveRelayUpdate:) NSDictionary *_preemptiveRelayUpdate; // @synthesize _preemptiveRelayUpdate;
@property(retain, nonatomic, setter=_setPreemptiveRelayInitate:) NSDictionary *_preemptiveRelayInitate; // @synthesize _preemptiveRelayInitate=_preemptiveRelayRequest;
@property(retain, nonatomic) NSDictionary *properties; // @synthesize properties=_properties;
@property(setter=setARDRole:) int ardRole; // @synthesize ardRole=_ardRole;
@property(nonatomic, setter=_setChatError:) int error; // @synthesize error=_chatError;
@property(readonly, nonatomic) unsigned int reasonChatEnded; // @synthesize reasonChatEnded=_chatEndedReason;
@property(readonly, nonatomic) BOOL isInitiator; // @synthesize isInitiator=_isInitiator;
@property(nonatomic, assign, setter=setAVChat:) IMAVChat *avChat; // @synthesize avChat=_avChat;
@property(readonly, retain, nonatomic) IMHandle *invitedBy; // @synthesize invitedBy=_inviter;
@property(readonly, retain, nonatomic) IMHandle *imHandle; // @synthesize imHandle=_imHandle;
@property(setter=_setCameraOrientation:) unsigned int cameraOrientation; // @synthesize cameraOrientation=_cameraOrientation;
@property(setter=_setCameraType:) unsigned int cameraType; // @synthesize cameraType=_cameraType;
@property(setter=setAVRelayStatus:) int avRelayStatus; // @synthesize avRelayStatus=_avRelayStatus;
@property(retain, setter=setVCPartyID:) NSString *vcPartyID; // @synthesize vcPartyID=_vcPartyID;
@property(setter=setRecording:) BOOL isRecording; // @synthesize isRecording=_isRecording;
@property(setter=setNetworkStalled:) BOOL isNetworkStalled; // @synthesize isNetworkStalled=_networkStalled;
@property(readonly) BOOL isUsingICE; // @synthesize isUsingICE=_usingICE;
@property(setter=setAOLInterop:) BOOL isAOLInterop; // @synthesize isAOLInterop=_isAOLInterop;
@property(setter=setVideoPaused:) BOOL isVideoPaused; // @synthesize isVideoPaused=_videoPaused;
@property(setter=setAudioMuted:) BOOL isAudioMuted; // @synthesize isAudioMuted=_audioMuted;
@property(setter=setSendingAuxVideo:) BOOL isSendingAuxVideo; // @synthesize isSendingAuxVideo=_sendingAuxVideo;
@property(retain, setter=_setLocalICEData:) NSData *_localICEData; // @synthesize _localICEData;
@property(readonly) BOOL isSendingVideo; // @synthesize isSendingVideo=_sendingVideo;
@property(readonly) BOOL isSendingAudio; // @synthesize isSendingAudio=_sendingAudio;
- (void)sendInvitation;
- (void)cancelInvitation;
- (void)sendVCUpdate;
- (void)sendResponse:(unsigned int)arg1;
- (void)sendCounterProposal;
- (void)sendRelayProposal;
- (void)receivedRelayProposalRequestWithConnectionData:(id)arg1;
- (void)receivedRelayProposalAcceptWithConnectionData:(id)arg1;
- (void)setWaitingToConnect:(BOOL)arg1;
- (void)resetWaitingToConnectTimer;
- (void)_connectTimeout:(id)arg1;
- (void)_flushMessagesQueue;
- (void)_cancelMessagesQueue;
- (void)_enqueueOperation:(id)arg1;
@property(readonly, nonatomic) IMAVChatParticipant *remoteErrorParticipant;
- (void)_getErrorString:(id *)arg1 rawString:(id *)arg2 forError:(int)arg3;
- (void)_generateErrorStrings;
@property(readonly, retain, nonatomic) NSString *rawErrorString;
@property(readonly, retain, nonatomic) NSString *errorString;
- (id)errorStringFor:(int)arg1;
- (void)_setError:(int)arg1;
@property(nonatomic) void *videoLayer;
@property(nonatomic) void *videoBackLayer;

@end

@interface IMAVInterface : NSObject
{
    id _delegate;
    BOOL _keepCameraRunning;
}

+ (id)sharedInstance;
+ (id)alloc;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (void)dealloc;
- (void)initAVInterface;
- (void)cleanupAVInterface;
- (void)invalidateAVInterface;
- (void)_conferenceWillStart:(id)arg1;
- (void)_conferenceEnded:(id)arg1;
- (void)_notifyAboutPotentialCallForChat:(id)arg1;
@property(readonly, nonatomic) unsigned int overallChatState;
- (void)chatStateUpdated;
@property(readonly, nonatomic) BOOL isAVInterfaceReady;
- (void)unsetDelegate:(id)arg1;
@property(readonly, nonatomic) BOOL systemCanARD;
@property(readonly, nonatomic) BOOL systemCanHostARD;
@property(readonly, nonatomic) BOOL systemCanVideoChat;
@property(readonly, nonatomic) BOOL systemCanAudioChat;
@property(readonly, nonatomic) BOOL systemCanHostMultiwayVideo;
@property(readonly, nonatomic) BOOL systemCanHostMultiwayAudio;
- (BOOL)systemCanSendWidescreen;
- (BOOL)systemCanReceiveWidescreen;
- (BOOL)systemCanSendHighRes;
- (BOOL)systemCanReceiveHighRes;
- (BOOL)systemCanSendFullHD;
- (void)avChat:(id)arg1 setAllowsVideo:(BOOL)arg2;
- (BOOL)allowsVideoForAVChat:(id)arg1;
@property(readonly, nonatomic) BOOL systemCanRecordAudio;
@property(readonly, nonatomic) BOOL systemCanRecordVideo;
- (void)avChat:(id)arg1 setCameraType:(unsigned int)arg2;
- (unsigned int)cameraTypeForAVChat:(id)arg1;
@property(nonatomic) unsigned int cameraType;
- (void)avChat:(id)arg1 setCameraOrientation:(unsigned int)arg2;
- (unsigned int)cameraOrientationForAVChat:(id)arg1;
- (unsigned int)cameraOrientation;
- (void)setCameraOrientation:(unsigned int)arg1;
- (float)audioVolumeForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setAudioVolume:(float)arg2;
- (BOOL)isMuteForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setMute:(BOOL)arg2;
- (BOOL)isPausedForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setPaused:(BOOL)arg2;
- (BOOL)isRemoteMuteForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setRemoteMute:(BOOL)arg2;
- (BOOL)isRemotePausedForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setRemotePaused:(BOOL)arg2;
- (BOOL)isSendingAudioForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setSendingAudio:(BOOL)arg2;
- (BOOL)isSendingVideoForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setSendingVideo:(BOOL)arg2;
- (void)avChat:(id)arg1 setValidatedIdentity:(struct OpaqueSecIdentityRef *)arg2;
- (BOOL)lockCameraForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setLockCamera:(BOOL)arg2;
@property(readonly, nonatomic) unsigned long long capabilitiesOfNetwork;
@property(readonly, nonatomic) unsigned long long capabilitiesOfCPU;
@property(readonly, nonatomic) unsigned long long capabilities;
- (BOOL)startPreviewWithError:(id *)arg1;
- (BOOL)stopPreview;
- (BOOL)openCamera;
- (BOOL)closeCamera;
- (int)endConferenceForAVChat:(id)arg1;
- (BOOL)avChat:(id)arg1 startConferenceWithUserID:(id)arg2;
- (int)avChat:(id)arg1 endConferenceForUserID:(id)arg2;
- (void)avChat:(id)arg1 enableSoftwareCamera:(BOOL)arg2;
- (void)avChat:(id)arg1 enableSoftwareMicrophone:(BOOL)arg2;
- (unsigned int)avChat:(id)arg1 enableAudioReflector:(BOOL)arg2;
- (void)avChat:(id)arg1 prepareConnectionWithRemoteConnectionData:(id)arg2 localConnectionData:(id)arg3;
- (id)avChat:(id)arg1 localICEDataForHandle:(id)arg2 usingRelay:(BOOL)arg3;
- (void)avChat:(id)arg1 setUserName:(id)arg2;
- (id)getNatIPFromICEData:(id)arg1;
- (id)natTypeForAVChat:(id)arg1;
@property(readonly, nonatomic) NSString *externalIPAddress;
@property(readonly, nonatomic) unsigned int externalSIPPort;
- (id)avChat:(id)arg1 IPAndPortDataWithCallerIPAndPortData:(id)arg2 shouldFindExternalIP:(BOOL)arg3;
- (id)avChat:(id)arg1 IPAndPortDataWithCallerIP:(id)arg2 callerSIPPort:(unsigned int)arg3 shouldFindExternalIP:(BOOL)arg4;
@property(readonly, nonatomic) BOOL supportsLayers;
@property(nonatomic) void *remoteVideoLayer;
@property(nonatomic) void *localVideoLayer;
@property(nonatomic) void *remoteVideoBackLayer;
@property(nonatomic) void *localVideoBackLayer;
@property(nonatomic) unsigned int maxBitrate;
@property(readonly, nonatomic) BOOL supportsRelay;
- (void)handleRelayInitate:(id)arg1 fromParticipant:(id)arg2;
- (void)handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2;
- (void)handleRelayCancel:(id)arg1 fromParticipant:(id)arg2;
@property(readonly, nonatomic) id controller;
@property(readonly, nonatomic) id _controller;
- (void)persistentProperty:(id)arg1 changedTo:(id)arg2 from:(id)arg3;
- (void)avChat:(id)arg1 setLocalLandscapeAspectRatio:(struct CGSize)arg2 localPortraitAspectRatio:(struct CGSize)arg3;
- (long long)_checkNetworkForChat:(id)arg1;
@property(retain, nonatomic, setter=_setCurrentMicrophone:) IMAVMicrophone *_currentMicrophone;
@property(retain, nonatomic, setter=_setCurrentCamera:) IMAVCamera *_currentCamera;
@property(readonly, nonatomic) BOOL _previewStarted;
@property(nonatomic) BOOL shouldKeepCameraRunning; // @synthesize shouldKeepCameraRunning=_keepCameraRunning;
@property(assign) id delegate; // @synthesize delegate=_delegate;

@end

@interface IMAVConferenceInterface : IMAVInterface <AVConferenceDelegate>
{
    NSMutableArray *_avConferencesToCleanup;
    NSMutableDictionary *_avConferences;
    AVConference *_vcc;
    BOOL _duringInit;
    BOOL _previewStarted;
    BOOL _pendingCleanup;
}

+ (BOOL)_useMultipleAVConference;
+ (void)_postParticipantMediaChangeNotification:(id)arg1 cameraChanged:(BOOL)arg2 orientationChanged:(BOOL)arg3 aspectChanged:(BOOL)arg4 cameraWillSwitch:(BOOL)arg5 camera:(unsigned int)arg6 orentation:(unsigned int)arg7 aspect:(struct CGSize)arg8;
+ (void)_postParticipantScreenAttributesChangeNotification:(id)arg1 cameraChanged:(BOOL)arg2 orientationChanged:(BOOL)arg3 aspectChanged:(BOOL)arg4 cameraWillSwitch:(BOOL)arg5 camera:(unsigned int)arg6 orentation:(unsigned int)arg7 aspect:(struct CGSize)arg8;
- (id)init;
- (void)dealloc;
- (void)_configureAVConference:(id)arg1;
- (BOOL)_hasAVConferenceObjectsForChatsOtherThan:(id)arg1;
- (id)_existingConferenceForAVChat:(id)arg1;
- (id)_conferenceForAVChat:(id)arg1;
- (id)_avChatForConference:(id)arg1;
- (id)_avChatForConference:(id)arg1 callID:(long long)arg2 errorString:(id)arg3;
- (void)_cleanupAVInterface;
- (void)_queueAVConferenceForCleanup:(id)arg1;
- (void)invalidateAVInterface;
- (void)initAVInterface;
- (BOOL)isAVInterfaceReady;
- (void)_conferenceEnded:(id)arg1;
- (BOOL)allowsVideoForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setCameraType:(unsigned int)arg2;
- (unsigned int)cameraTypeForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setCameraOrientation:(unsigned int)arg2;
- (unsigned int)cameraOrientationForAVChat:(id)arg1;
- (BOOL)isMuteForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setMute:(BOOL)arg2;
- (BOOL)isPausedForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setPaused:(BOOL)arg2;
- (BOOL)isSendingAudioForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setSendingAudio:(BOOL)arg2;
- (BOOL)isSendingVideoForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setSendingVideo:(BOOL)arg2;
- (unsigned long long)capabilitiesOfNetwork;
- (unsigned long long)capabilitiesOfCPU;
- (unsigned long long)capabilities;
- (BOOL)startPreviewWithError:(id *)arg1;
- (BOOL)stopPreview;
- (BOOL)openCamera;
- (BOOL)closeCamera;
- (int)endConferenceForAVChat:(id)arg1;
- (BOOL)avChat:(id)arg1 startConferenceWithUserID:(id)arg2;
- (int)avChat:(id)arg1 endConferenceForUserID:(id)arg2;
- (unsigned int)avChat:(id)arg1 enableAudioReflector:(BOOL)arg2;
- (void)_notifyAboutPotentialCallForChat:(id)arg1;
- (id)getNatIPFromICEData:(id)arg1;
- (id)natTypeForAVChat:(id)arg1;
- (void)avChat:(id)arg1 prepareConnectionWithRemoteConnectionData:(id)arg2 localConnectionData:(id)arg3;
- (id)avChat:(id)arg1 localICEDataForHandle:(id)arg2 usingRelay:(BOOL)arg3;
- (void)conference:(id)arg1 didStartSession:(BOOL)arg2 withUserInfo:(id)arg3;
- (void)conference:(id)arg1 didStopWithCallID:(long long)arg2 error:(id)arg3;
- (void)conference:(id)arg1 updateInputMeterLevel:(float)arg2;
- (void)conference:(id)arg1 updateOutputMeterLevel:(float)arg2;
- (void)conference:(id)arg1 receivedFirstPreviewForCallID:(long long)arg2;
- (void)conference:(id)arg1 receivedFirstRemoteFrameForCallID:(long long)arg2;
- (void)conference:(id)arg1 remoteScreenAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 inititiateRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)conference:(id)arg1 sendRelayUpdate:(long long)arg2 updateDict:(id)arg3;
- (void)conference:(id)arg1 cancelRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)conference:(id)arg1 receivedNoRemotePacketsForTime:(double)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteAudioPaused:(BOOL)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoPaused:(BOOL)arg2 callID:(long long)arg3;
- (BOOL)supportsLayers;
- (void *)remoteVideoLayer;
- (void)setRemoteVideoLayer:(void *)arg1;
- (void *)localVideoLayer;
- (void)setLocalVideoLayer:(void *)arg1;
- (void *)remoteVideoBackLayer;
- (void)setRemoteVideoBackLayer:(void *)arg1;
- (void *)localVideoBackLayer;
- (void)setLocalVideoBackLayer:(void *)arg1;
- (BOOL)supportsRelay;
- (void)handleRelayInitate:(id)arg1 fromParticipant:(id)arg2;
- (void)handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2;
- (void)handleRelayCancel:(id)arg1 fromParticipant:(id)arg2;
- (void)setupComplete;
- (void)persistentProperty:(id)arg1 changedTo:(id)arg2 from:(id)arg3;
@property(readonly, nonatomic) AVConference *controller;
- (id)_controller;
- (void)avChat:(id)arg1 setLocalLandscapeAspectRatio:(struct CGSize)arg2 localPortraitAspectRatio:(struct CGSize)arg3;
- (void)chatStateUpdated;
- (long long)_checkNetworkForChat:(id)arg1;
- (void)_setCurrentMicrophone:(id)arg1;
- (id)_currentMicrophone;
- (void)_setCurrentCamera:(id)arg1;
- (id)_currentCamera;
- (BOOL)_previewStarted;

@end

@interface IMAVController : NSObject
{
    id <IMAVControllerDelegate> _delegate;
    BOOL _blockMultipleIncomingInvitations;
    BOOL _blockOutgoingInvitationsDuringCall;
    BOOL _blockIncomingInvitationsDuringCall;
}

+ (id)sharedInstance;
+ (void)setupIMAVController;
+ (void)setIMAVCapabilities:(int)arg1 toCaps:(int)arg2;
+ (BOOL)hasActiveConference;
+ (unsigned int)overallChatState;
+ (BOOL)microphoneCapable;
+ (BOOL)microphoneConnected;
+ (BOOL)multiAudioCapable;
+ (BOOL)blockMicrophoneCapable;
+ (void)setBlockMicrophoneCapable:(BOOL)arg1;
+ (BOOL)blockAudioOnlyCalls;
+ (void)setBlockAudioOnlyCalls:(BOOL)arg1;
+ (BOOL)cameraCapable;
+ (BOOL)cameraConnected;
+ (BOOL)multiVideoCapable;
+ (BOOL)blockCameraCapable;
+ (void)setBlockCameraCapable:(BOOL)arg1;
+ (BOOL)ARDServerCapable;
+ (BOOL)ARDClientCapable;
+ (BOOL)blockARDCapable;
+ (void)setBlockARDCapable:(BOOL)arg1;
+ (BOOL)canUseSmallDataBlobs;
+ (BOOL)canReceiveWidescreen;
+ (BOOL)softwareCameraEnabled;
+ (void)setSoftwareCameraEnabled:(BOOL)arg1;
+ (BOOL)softwareMicrophoneEnabled;
+ (void)setSoftwareMicrophoneEnabled:(BOOL)arg1;
+ (id)delegate;
+ (void)setDelegate:(id)arg1;
+ (void)requestPendingVCInvitations;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (BOOL)_runningInLegacyVCApp;
- (BOOL)_shouldHandleInvites;
- (BOOL)_shouldRunConferences;
- (void)_markSetup;
- (void)setupIMAVController;
- (id)init;
- (void)declineVCRequestWithBuddy:(id)arg1 response:(unsigned int)arg2 vcProps:(id)arg3 conferenceID:(id)arg4;
- (id)vcResponseInfoWithSessionID:(unsigned int)arg1 ICEData:(id)arg2 natType:(id)arg3 natIP:(id)arg4 ardChannelInfo:(id)arg5 forParticipant:(id)arg6 relaySupported:(BOOL)arg7;
- (id)vcResponseInfoWithSessionID:(unsigned int)arg1;
- (void)declineVCRequestWithBuddy:(id)arg1 response:(unsigned int)arg2 vcProps:(id)arg3 forAccount:(id)arg4 conferenceID:(id)arg5;
- (void)cancelVCRequestWithBuddy:(id)arg1 vcProps:(id)arg2 forAccount:(id)arg3 conferenceID:(id)arg4;
- (void)dumpCaps;
- (void)_setServiceVCCaps:(unsigned long long)arg1 toCaps:(unsigned long long)arg2;
- (void)setIMAVCapabilities:(int)arg1 toCaps:(int)arg2;
- (void)vcCapabilitiesChanged:(unsigned long long)arg1;
- (void)pushCachedVCCapsToDaemon;
@property(readonly, nonatomic) unsigned int overallChatState;
- (void)setHasActiveConference:(BOOL)arg1;
- (void)updateActiveConference;
@property(readonly, nonatomic) BOOL multiAudioCapable;
@property(readonly, nonatomic) BOOL multiVideoCapable;
@property(readonly, nonatomic) BOOL cameraConnected;
@property(readonly, nonatomic) BOOL microphoneConnected;
@property(readonly, nonatomic) BOOL hasActiveConference;
@property(readonly, nonatomic) BOOL ARDClientCapable;
@property(readonly, nonatomic) BOOL canUseSmallDataBlobs;
- (BOOL)canReceiveWidescreen;
@property(readonly, nonatomic) BOOL ARDServerCapable;
@property(readonly, nonatomic) BOOL cameraCapable;
@property(readonly, nonatomic) BOOL microphoneCapable;
- (BOOL)ardMuxingSupported;
@property(readonly, nonatomic) BOOL softwareCameraSupported;
@property(readonly, nonatomic) BOOL softwareMicrophoneSupported;
@property(nonatomic) BOOL softwareCameraEnabled;
@property(nonatomic) BOOL softwareMicrophoneEnabled;
@property(nonatomic) BOOL blockAudioOnlyCalls;
@property(nonatomic) BOOL blockMicrophoneCapable;
@property(nonatomic) BOOL blockCameraCapable;
@property(nonatomic) BOOL blockARDCapable;
- (void)currentAVChatInfoChanged:(id)arg1;
- (void)requestPendingVCInvitations;
@property(readonly, nonatomic) BOOL _ready;
@property(nonatomic) BOOL blockIncomingInvitationsDuringCall; // @synthesize blockIncomingInvitationsDuringCall=_blockIncomingInvitationsDuringCall;
@property(nonatomic) BOOL blockOutgoingInvitationsDuringCall; // @synthesize blockOutgoingInvitationsDuringCall=_blockOutgoingInvitationsDuringCall;
@property(nonatomic) BOOL blockMultipleIncomingInvitations; // @synthesize blockMultipleIncomingInvitations=_blockMultipleIncomingInvitations;
@property(nonatomic, assign) id <IMAVControllerDelegate> delegate; // @synthesize delegate=_delegate;

@end

@interface IMAVDVDController : NSObject
{
    DVDApplication *_application;
    BOOL _didPause;
}

+ (id)sharedInstance;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (id)init;
- (void)dealloc;
- (int)_dvdState;
- (BOOL)_pauseDVD;
- (BOOL)_playDVD;
- (void)resume;
- (void)pause;

@end

@interface IMAVDesktopInterface : IMAVInterface <VideoConferenceDelegateProtocol>
{
    FZVideoConferenceController *_vcc;
    BOOL _duringInit;
}

+ (id)bestChatForVCPartyID:(id)arg1 errorString:(id)arg2;
- (id)init;
- (void)dealloc;
- (void)initAVInterface;
- (BOOL)isAVInterfaceReady;
- (void)_conferenceWillStart:(id)arg1;
- (BOOL)systemCanHostMultiwayVideo;
- (BOOL)systemCanHostMultiwayAudio;
- (void)avChat:(id)arg1 setAllowsVideo:(BOOL)arg2;
- (BOOL)allowsVideoForAVChat:(id)arg1;
- (BOOL)systemCanRecordAudio;
- (BOOL)systemCanRecordVideo;
- (float)audioVolumeForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setAudioVolume:(float)arg2;
- (BOOL)isMuteForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setMute:(BOOL)arg2;
- (BOOL)isPausedForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setPaused:(BOOL)arg2;
- (BOOL)isRemoteMuteForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setRemoteMute:(BOOL)arg2;
- (BOOL)isRemotePausedForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setRemotePaused:(BOOL)arg2;
- (BOOL)isSendingAudioForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setSendingAudio:(BOOL)arg2;
- (BOOL)isSendingVideoForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setSendingVideo:(BOOL)arg2;
- (void)avChat:(id)arg1 setValidatedIdentity:(struct OpaqueSecIdentityRef *)arg2;
- (BOOL)lockCameraForAVChat:(id)arg1;
- (void)avChat:(id)arg1 setLockCamera:(BOOL)arg2;
- (BOOL)isSecurityEnabledForAVChat:(id)arg1;
- (BOOL)isSecurityValidForAVChat:(id)arg1;
- (id)natTypeForAVChat:(id)arg1;
- (unsigned long long)capabilitiesOfNetwork;
- (unsigned long long)capabilitiesOfCPU;
- (unsigned long long)capabilities;
- (BOOL)openCamera;
- (BOOL)closeCamera;
- (void)_conferenceEnded:(id)arg1;
- (int)endConferenceForAVChat:(id)arg1;
- (BOOL)avChat:(id)arg1 startConferenceWithUserID:(id)arg2;
- (int)avChat:(id)arg1 endConferenceForUserID:(id)arg2;
- (void)avChat:(id)arg1 enableSoftwareCamera:(BOOL)arg2;
- (void)avChat:(id)arg1 enableSoftwareMicrophone:(BOOL)arg2;
- (unsigned int)avChat:(id)arg1 enableAudioReflector:(BOOL)arg2;
- (void)avChat:(id)arg1 prepareConnectionWithRemoteConnectionData:(id)arg2 localConnectionData:(id)arg3;
- (id)avChat:(id)arg1 localICEDataForHandle:(id)arg2 usingRelay:(BOOL)arg3;
- (void)avChat:(id)arg1 setUserName:(id)arg2;
- (id)getNatIPFromICEData:(id)arg1;
- (id)externalIPAddress;
- (unsigned int)externalSIPPort;
- (id)avChat:(id)arg1 IPAndPortDataWithCallerIPAndPortData:(id)arg2 shouldFindExternalIP:(BOOL)arg3;
- (id)avChat:(id)arg1 IPAndPortDataWithCallerIP:(id)arg2 callerSIPPort:(unsigned int)arg3 shouldFindExternalIP:(BOOL)arg4;
- (struct OpaqueSecCertificateRef *)avChat:(id)arg1 remoteCertificateForUser:(id)arg2;
- (id)userIDForPartyID:(id)arg1;
- (void)vcc:(id)arg1 remoteCameraBeingChangedForParty:(id)arg2;
- (void)vcc:(id)arg1 initiateConferenceStartedForParty:(id)arg2;
- (void)vcc:(id)arg1 conferenceAttempted:(id)arg2;
- (void)vcc:(id)arg1 initiateConferenceCompletedForParty:(id)arg2 partyInfo:(id)arg3;
- (void)vcc:(id)arg1 partyConnected:(id)arg2;
- (void)vcc:(id)arg1 partyHungUp:(id)arg2;
- (void)vcc:(id)arg1 party:(id)arg2 didMute:(BOOL)arg3;
- (void)vcc:(id)arg1 party:(id)arg2 didPause:(BOOL)arg3;
- (void)vcc:(id)arg1 partyCancelled:(id)arg2;
- (void)vccInsufficientBandwidth:(id)arg1 forParty:(id)arg2 partyInfo:(id)arg3;
- (void)vccNetworkTimeout:(id)arg1;
- (void)vccLocalVideoError:(id)arg1;
- (void)vcc:(id)arg1 noPacketsFromParty:(id)arg2 partyInfo:(id)arg3;
- (void)vcc:(id)arg1 party:(id)arg2 didStall:(BOOL)arg3;
- (BOOL)shouldAcceptIncomingVideoConferenceRequestFromUser:(id)arg1 callbackInfo:(id)arg2;
- (BOOL)shouldAcceptIncomingVideoConferenceRequestFromUser:(id)arg1;
- (BOOL)vcc:(id)arg1 isRemoteCertificateValid:(struct OpaqueSecCertificateRef *)arg2 forUser:(id)arg3;
- (void)vcc:(id)arg1 securityChangedForUser:(id)arg2;
- (void)vccLocalCertNotAccepted:(id)arg1;
- (void)vccRemoteCertNotAccepted:(id)arg1 forParty:(id)arg2;
- (BOOL)vcc:(id)arg1 isUserLikelyAIM59OrBelow:(id)arg2;
- (BOOL)vcc:(id)arg1 userRequestedAuxiliaryInput:(id)arg2;
- (void)vcc:(id)arg1 user:(id)arg2 approvedAuxiliaryInput:(BOOL)arg3;
- (void)vcc:(id)arg1 userBeganAuxiliaryInput:(id)arg2;
- (void)vcc:(id)arg1 userEndedAuxiliaryInput:(id)arg2;
- (void)vcc:(id)arg1 party:(id)arg2 statsForEndingConference:(id)arg3;
- (BOOL)supportsRelay;
- (void)setMaxBitrate:(unsigned int)arg1;
- (unsigned int)maxBitrate;
@property(readonly, nonatomic) FZVideoConferenceController *controller;
- (void)avChat:(id)arg1 setLocalLandscapeAspectRatio:(struct CGSize)arg2 localPortraitAspectRatio:(struct CGSize)arg3;

@end

@interface IMAVHandler : NSObject
{
    NSMutableArray *_wifiActivationQueue;
    NSTimer *_wiFiQueueTimer;
}

+ (void)initialize;
+ (void)ensureHandlerSetup;
- (void)dealloc;
- (void)account:(id)arg1 conference:(id)arg2 receivedInvitationFrom:(id)arg3 properties:(id)arg4;
- (void)account:(id)arg1 conference:(id)arg2 receivedCounterProposalFrom:(id)arg3 properties:(id)arg4;
- (void)account:(id)arg1 conference:(id)arg2 receivedResponseToInvitationFrom:(id)arg3 properties:(id)arg4;
- (void)account:(id)arg1 conference:(id)arg2 receivedCancelInvitationFrom:(id)arg3 properties:(id)arg4;
- (void)account:(id)arg1 conference:(id)arg2 receivedUpdateFrom:(id)arg3 data:(id)arg4;
- (void)account:(id)arg1 conference:(id)arg2 receivedAVMessage:(unsigned int)arg3 from:(id)arg4 sessionID:(unsigned int)arg5 userInfo:(id)arg6;
- (void)account:(id)arg1 conference:(id)arg2 peerIDChangedFromID:(id)arg3 toID:(id)arg4;
- (void)account:(id)arg1 conference:(id)arg2 changedToNewConferenceID:(id)arg3;
- (void)account:(id)arg1 conference:(id)arg2 requestSendResponseWithResult:(long long)arg3 toPerson:(id)arg4;
- (void)_setWiFiActivationTimer;
- (void)_clearWiFiActivationQueue;
- (void)_checkWiFiQueue:(id)arg1;
- (void)_notifyMissedInvitationFor:(id)arg1;
- (void)_notifyInvitationFor:(id)arg1;
- (void)_notifyOfIncomingInvitationFor:(id)arg1 notifyInvitationListeners:(BOOL)arg2;
- (void)_enqueueIMAVChatForWiFiActivation:(id)arg1;
- (void)_handleIncomingAVChatForNotification:(id)arg1;
- (void)account:(id)arg1 conference:(id)arg2 requestInvitationWithBuddy:(id)arg3;
- (void)account:(id)arg1 conference:(id)arg2 notifyMissedInvitationWithBuddy:(id)arg3;
- (void)account:(id)arg1 conference:(id)arg2 cancelRequestInvitationWithBuddy:(id)arg3;
- (void)vcCapabilitiesChanged:(unsigned long long)arg1;
- (void)pendingVCRequestComplete;
- (void)setupComplete;
- (void)account:(id)arg1 conference:(id)arg2 peerID:(id)arg3 propertiesUpdated:(id)arg4;
- (void)property:(id)arg1 changedTo:(id)arg2 from:(id)arg3;
- (void)persistentProperty:(id)arg1 changedTo:(id)arg2 from:(id)arg3;
- (void)account:(id)arg1 postedError:(id)arg2;
- (void)account:(id)arg1 relay:(id)arg2 handleInitate:(id)arg3 fromPerson:(id)arg4;
- (void)account:(id)arg1 relay:(id)arg2 handleUpdate:(id)arg3 fromPerson:(id)arg4;
- (void)account:(id)arg1 relay:(id)arg2 handleCancel:(id)arg3 fromPerson:(id)arg4;
- (void)currentAVChatInfoRequestedWithTransactionID:(unsigned int)arg1;
- (void)audioReflectorRequested:(BOOL)arg1 transactionID:(unsigned int)arg2;
- (void)videoStillForPersonRequested:(id)arg1 withTransactionID:(unsigned int)arg2;

@end

@interface IMAVInvitationController : NSObject
{
}

+ (void)_markSetup;
+ (void)setupIMAVInvitationController;
+ (void)acceptInvitationRequestFromBuddy:(id)arg1 forConference:(id)arg2;
+ (void)declineInvitationRequestFromBuddy:(id)arg1 forConference:(id)arg2;
+ (void)sendResponse:(unsigned int)arg1 toInvitationRequestFromBuddy:(id)arg2 forConference:(id)arg3;
+ (void)setDelegate:(id)arg1;
+ (id)delegate;
+ (unsigned int)currentAVChatState;
+ (unsigned int)currentAVChatEndedReason;
+ (id)curentAVChatRemoteUserID;
+ (id)curentAVChatConnectedDate;

@end

@interface IMAVMicrophone : NSObject
{
    id _internalDevice;
}

- (id)_initWithFTAudioDevice:(id)arg1;
- (id)init;
- (void)dealloc;
@property(readonly, retain, nonatomic) NSString *name;
- (id)_FTAudioDevice;
@property(readonly, retain, nonatomic) NSString *uniqueID;
- (id)description;

@end

@interface IMAVMicrophoneController : NSObject
{
    id _internal;
    NSMutableArray *_microphones;
}

+ (id)sharedInstance;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (id)init;
@property(readonly, retain, nonatomic) NSArray *microphones;
- (void)dealloc;
- (void)_rebuildMicrophoneList;
- (void)_loadSavedMicrophone;
@property(retain, nonatomic) IMAVMicrophone *currentMicrophone;

@end

@interface IMAVTelephonyManager : NSObject
{
    BOOL _isDesignatedServiceProvider;
    struct __CFMachPort *_ctServerMachPort;
    struct __CFUUID *_ctToken;
}

+ (id)sharedInstance;
+ (id)numberToDialForNumber:(id)arg1 dialAssist:(char *)arg2;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (id)init;
- (void)dealloc;
- (BOOL)_registerCTRequestService;
- (BOOL)_unregisterCTRequestService;
- (void)_cleanupMachInfo;
- (BOOL)_setupCTServerConnection;
- (BOOL)_reconnectCTServerConnectionIfNecessary;
- (BOOL)_disconnectCTServerConnection;
@property(readonly, nonatomic) unsigned int callState;
- (void)_disconnectCSCallWithID:(id)arg1;
- (BOOL)_isOnCallToID:(id)arg1;
- (void)notifyCallConnectedForChat:(id)arg1;
- (void)notifyCallConnectingForChat:(id)arg1;
- (void)notifyCallStartedForChat:(id)arg1;
- (void)notifyMissedCallForChat:(id)arg1;
- (void)notifyCallEndedForChat:(id)arg1;
- (void)updateCallState;
- (void)startWatchingForCTRequests;
- (void)stopWatchingForCTRequests;

@end

@interface IMAViTunesController : NSObject
{
    iTunesApplication *_application;
    BOOL _didPause;
}

+ (id)sharedInstance;
- (void)release;
- (unsigned long long)retainCount;
- (id)autorelease;
- (id)init;
- (void)dealloc;
- (void)resume;
- (void)pause;

@end

@interface IMHandle (AVChatExtensions)
@property(readonly, nonatomic) BOOL hasNoConferencingCaps;
@end

@interface NSArray (IMAVChatExtensions)
- (id)componentsJoinedIntoListWithMaxItems:(int)arg1;
@end

@interface NSData (PublicKeyAdditions)
+ (id)dataWithPublicKey:(struct OpaqueSecKeyRef *)arg1;
@property(readonly, nonatomic) struct OpaqueSecKeyRef *publicKeyFromData;
@end

@interface NSDictionary (VCChannelNegotiationAdditions)
- (id)vcChannelRequestID;
@end

@interface NetworkCheckOperation : IMExtendedOperation
{
    IMAVChatParticipant *_participant;
    unsigned int _foundActiveWiFi:1;
    unsigned int _foundUsableNetwork:1;
}

- (id)initWithParticipant:(id)arg1;
- (void)dealloc;
- (void)main;
- (BOOL)hasActiveWiFi;
- (BOOL)hasValidNetwork;

@end

@interface VCChannelNegotiation : NSObject
{
    IMAVChatParticipant *_participant;
    IMHandle *_localIMHandle;
    unsigned int _avChatSessionID;
    BOOL _incoming;
    unsigned int _requestID;
    unsigned int _channelType;
    unsigned long long _state;
    BOOL _channelPrepared;
    int _connectionError;
    VCChannel *_channel;
    NSData *_remoteData;
    unsigned int _keyExchangeMode;
    unsigned long long _encryptionKeySize;
    NSData *_encryptionKey;
    NSData *_validationKey;
    struct OpaqueSecKeyRef *_keyExchangePublicKey;
    struct OpaqueSecKeyRef *_keyExchangePrivateKey;
    NSOperationQueue *_negotiationQueue;
}

- (id)_initWithParticipant:(id)arg1 requestID:(unsigned int)arg2 channelType:(unsigned int)arg3 incoming:(BOOL)arg4 remoteData:(id)arg5 encryptionKeySize:(unsigned long long)arg6 keyExchangeMode:(unsigned int)arg7 keyExchangeData:(id)arg8;
- (id)initRequestTo:(id)arg1 channelType:(unsigned int)arg2 encryptionKeySize:(unsigned long long)arg3;
- (id)initRequestFrom:(id)arg1 userInfo:(id)arg2;
- (void)dealloc;
@property(readonly) NSData *encryptionKey;
- (void)_logState;
@property unsigned long long state; // @synthesize state=_state;
@property(readonly) BOOL ended;
- (void)_getRequestData:(id *)arg1 forKey:(id *)arg2;
- (int)_sendSharedKey;
- (int)_decryptSharedKey:(id)arg1;
- (void)_receiveSharedKey:(id)arg1;
- (id)userInfoForCompletedOperation:(id)arg1;
- (unsigned int)_messageTypeForState;
- (id)operationForNextMessage;
- (void)_enqueueNextMessage;
- (void)_finishConnection;
- (void)_finishPrepareChannel:(id)arg1;
- (void)_threadedPrepareChannel;
- (void)_prepareChannel;
- (void)_sendMessage:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)beginNegotiation;
- (void)_acceptRequest:(BOOL)arg1 remoteData:(id)arg2;
- (void)acceptRequest:(BOOL)arg1;
- (void)cancelRequest;
- (void)handleMessage:(unsigned int)arg1 userInfo:(id)arg2;
- (void)endNegotiation;
- (void)disconnectParticipant;
- (id)extractChannel;
@property(readonly) unsigned long long encryptionKeySize; // @synthesize encryptionKeySize=_encryptionKeySize;
@property(readonly) unsigned int keyExchangeMode; // @synthesize keyExchangeMode=_keyExchangeMode;
@property(readonly) int connectionError; // @synthesize connectionError=_connectionError;
@property(readonly, retain) VCChannel *channel; // @synthesize channel=_channel;
@property(readonly) BOOL incoming; // @synthesize incoming=_incoming;
@property(readonly) unsigned int channelType; // @synthesize channelType=_channelType;
@property(readonly) unsigned int requestID; // @synthesize requestID=_requestID;
@property(readonly) IMAVChatParticipant *participant; // @synthesize participant=_participant;

@end

@interface VCChannelNegotiationOp : IMExtendedOperation
{
    unsigned int _message;
    _GetVCChannelOp *_channelOp;
}

- (void)_createChildOpsWithIMHandle:(id)arg1;
- (id)initWithNegotiation:(id)arg1 message:(unsigned int)arg2;
@property(readonly, retain) VCChannel *vcChannel;
@property(readonly, retain) NSData *connectionData;
- (void)dealloc;
@property unsigned int message; // @synthesize message=_message;

@end

@interface _GetVCChannelOp : IMExtendedOperation
{
    BOOL _findExtIP;
    VCChannel *_channel;
    NSData *_data;
    IMHandle *_imHandle;
}

- (id)initAndFindExternalIP:(BOOL)arg1 withIMHandle:(id)arg2;
- (void)main;
- (void)dealloc;
@property(retain) NSData *data; // @synthesize data=_data;
@property(retain) VCChannel *channel; // @synthesize channel=_channel;
@property BOOL findExtIP; // @synthesize findExtIP=_findExtIP;
@property(retain) IMHandle *handle; // @synthesize handle=_imHandle;

@end

