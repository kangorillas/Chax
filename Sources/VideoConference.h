/*
 *     Generated by class-dump 3.3.3 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct _DNSServiceRef_t;

struct _SDPInfo {
    char _field1[1024];
    char _field2[1024];
};

struct _VCFocusCapability {
    char audioHardwareCapable;
    int maxAudioParticipantsBasedOnHardware;
    char audioNetworkCapable;
    int maxAudioParticipants;
    char canBeAudioMultipointParticipant;
    char videoHardwareCapable;
    int maxVideoParticipantsBasedOnHardware;
    char videoNetworkCapable;
    int maxVideoParticipants;
    char canBeVideoMultipointParticipant;
    int detectedUpstreamKbits;
    int detectedDownstreamKbits;
};

struct tagCALLBACKDATA {
    int _field1;
    int _field2;
    struct _opaque_pthread_mutex_t _field3;
    struct _opaque_pthread_cond_t _field4;
    char _field5[80];
    char _field6[1024];
    char _field7[1024];
    int _field8;
    char _field9[80];
    void *_field10;
    int _field11;
};

struct tagHANDLE {
    int _field1;
};

struct tagIPPORT {
    int _field1;
    char _field2[16];
    union {
        unsigned int _field1;
        unsigned char _field2[16];
    } _field3;
    unsigned short _field4;
};

struct tagInternalExternalMapping {
    struct tagIPPORT _field1;
    struct tagIPPORT _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
};

struct tagNetAddrMapInfo {
    struct _DNSServiceRef_t *sdRef;
    unsigned int flags;
    unsigned int interfaceIndex;
    int errorCode;
    unsigned int publicAddress;
    unsigned int protocol;
    unsigned short privatePort;
    unsigned short requestedPublicPort;
    unsigned short publicPort;
    unsigned int ttl;
    int hResult;
    int queryAnswered;
};

struct tagRTPHANDLES {
    struct tagHANDLE *hRTPVideo;
    struct tagHANDLE *hRTPAudio;
};

#pragma mark Typedef'd Structures

typedef struct {
    char *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
} CDStruct_79ad071c;

#pragma mark -

/*
 * File: VideoConference
 * UUID: C9E6E8B1-D0D2-3401-9BD2-ACC9BFE8F682
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 2.0.0, Compatibility version: 2.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Unsupported
 */

@class VideoConferenceMultiController, VCMicrophone, VCChannelModel, VCRulesCPUList, VCRulesImageSizeList, NATTraversal;

@protocol NotificationObserver;

@protocol VCRenderDelegateProtocol
- (int)processCVPixelBuffer:(struct __CVBuffer *)arg1 intoCVPixelBuffer:(struct __CVBuffer *)arg2 withHint:(id)arg3;
- (int)resizeRemoteVideoForUserID:(id)arg1 outBuffer:(struct __CVBuffer *)arg2;
@end

@protocol VideoConferenceDelegateProtocol
- (void)vcc:(id)arg1 initiateConferenceStartedForParty:(id)arg2;
- (void)vcc:(id)arg1 initiateConferenceCompletedForParty:(id)arg2 partyInfo:(id)arg3;
- (void)vcc:(id)arg1 partyConnected:(id)arg2;
- (void)vcc:(id)arg1 partyHungUp:(id)arg2;
- (void)vcc:(id)arg1 party:(id)arg2 didMute:(BOOL)arg3;
- (void)vcc:(id)arg1 party:(id)arg2 didPause:(BOOL)arg3;
- (void)vcc:(id)arg1 partyCancelled:(id)arg2;
- (void)vcc:(id)arg1 conferenceAttempted:(id)arg2;
- (void)vccInsufficientBandwidth:(id)arg1 forParty:(id)arg2 partyInfo:(id)arg3;
- (void)vccNetworkTimeout:(id)arg1;
- (void)vccLocalVideoError:(id)arg1;
- (void)vcc:(id)arg1 noPacketsFromParty:(id)arg2 partyInfo:(id)arg3;
- (void)vcc:(id)arg1 party:(id)arg2 didStall:(BOOL)arg3;
- (BOOL)shouldAcceptIncomingVideoConferenceRequestFromUser:(id)arg1 callbackInfo:(id)arg2;
- (BOOL)shouldAcceptIncomingVideoConferenceRequestFromUser:(id)arg1;
- (BOOL)vcc:(id)arg1 isRemoteCertificateValid:(struct OpaqueSecCertificateRef *)arg2 forUser:(id)arg3;
- (void)vcc:(id)arg1 securityChangedForUser:(id)arg2;
- (void)vccLocalCertNotAccepted:(id)arg1;
- (void)vccRemoteCertNotAccepted:(id)arg1 forParty:(id)arg2;
- (BOOL)vcc:(id)arg1 userRequestedAuxiliaryInput:(id)arg2;
- (void)vcc:(id)arg1 user:(id)arg2 approvedAuxiliaryInput:(BOOL)arg3;
@end

// Not exported
@interface AudioDeviceMonitor : NSObject
{
    unsigned int _inputDeviceCount;
    BOOL _needsRecount;
    unsigned int _deviceID;
}

+ (id)sharedMonitor;
- (id)init;
- (void)dealloc;
- (void)postMessage:(id)arg1;
- (BOOL)hasMicrophone;
- (unsigned int)inputDeviceCount;
- (void)monitorDevice:(unsigned int)arg1;
- (void)monitorCurrentDevice;
- (void)countInputDevices;
- (BOOL)isOutputMuted;
- (void)setOutputMute:(BOOL)arg1;

@end

// Not exported
@interface DotMacConfiguration : NSObject
{
    NSConditionLock *_condLock;
    NSMutableArray *_ipAndPortDataArray;
    NSString *_userDefaultsConfigurationURLKey;
    NSString *_dotMacConfigurationURL;
}

- (id)init;
- (void)dealloc;
- (void)getConfiguration;
- (id)ipAndPortArray;
- (void)getConfigurationProc:(id)arg1;

@end

// Not exported
@interface BWDConfiguration : DotMacConfiguration
{
}

- (id)init;
- (void)dealloc;
- (void)getConfiguration;

@end

// Not exported
@interface CallBackData : NSObject
{
    struct tagCALLBACKDATA *_pcbd;
}

- (struct tagCALLBACKDATA *)callBackData;
- (id)initWithCallBackData:(struct tagCALLBACKDATA *)arg1;
- (id)init;
- (id)resetData;

@end

// Not exported
@interface CommNATConfiguration : DotMacConfiguration
{
    _Bool _gotServerInfo;
    unsigned int _mainIP;
    unsigned short _mainPort0;
    unsigned short _mainPort1;
    unsigned int _cohortIP;
    unsigned short _cohortPort;
}

- (id)init;
- (void)dealloc;
- (int)getServerInfo:(unsigned int *)arg1 pMainPort0:(unsigned short *)arg2 pMainPort1:(unsigned short *)arg3 pCohortIP:(unsigned int *)arg4 pCohortPort:(unsigned short *)arg5;
- (void)getConfiguration;

@end

// Not exported
@interface DNSSDMappingClient : NSObject
{
    NSRecursiveLock *lock;
    NSMutableArray *mappings;
    struct __CFRunLoop *runLoop;
    struct __CFRunLoopSource *rls;
    BOOL isSocketBroken;
    BOOL isTraversalSupported;
    int primaryInterfaceIndex;
    NSThread *dnsThr;
}

+ (id)DNSSDMappingClient;
- (id)init;
- (void)dealloc;
- (id)findMapUsingRef:(struct _DNSServiceRef_t *)arg1;
- (id)findMapForPrivatePort:(unsigned short)arg1 ifaceIndex:(unsigned int)arg2;
- (void)mySocketCallback:(struct __CFSocket *)arg1 serviceRef:(struct _DNSServiceRef_t *)arg2;
- (void)removeMapping:(id)arg1;
- (int)setupRunLoopForResult:(id)arg1;
- (void)addAndSetupMapping:(id)arg1;
- (int)createPortMapping:(unsigned short)arg1 externalPort:(int)arg2 interfaceIndex:(int)arg3;
- (void)releaseAllMappingsProc:(id)arg1;
- (void)releaseAllMappings;
- (void)releaseMappingsForInterface:(int)arg1;
- (int)getExternalIPList:(struct tagIPPORT **)arg1 numMappingsOut:(int *)arg2;
- (BOOL)hasMappingForInterface:(int)arg1 port:(unsigned int)arg2;
- (int)getExternalIPList:(struct tagIPPORT **)arg1 numMappingsOut:(int *)arg2 matchingInterface:(int)arg3 matchingPrivatePort:(int)arg4 waitForAnswer:(BOOL)arg5;
@property int primaryInterfaceIndex; // @synthesize primaryInterfaceIndex;

@end

// Not exported
@interface DNSSDMappingInfo : NSObject
{
    NSConditionLock *queryCondLock;
    struct tagNetAddrMapInfo mapResult;
    int hasTimer;
    struct __CFRunLoopTimer *timer;
    struct __CFSocket *socketRef;
    struct __CFRunLoopSource *rls;
}

- (id)initWithRef:(struct _DNSServiceRef_t *)arg1;
- (id)initWithMapResult:(struct tagNetAddrMapInfo *)arg1;
- (void)dealloc;
- (void)setMapResult:(struct tagNetAddrMapInfo *)arg1;
- (void)addTimerForRunLoop:(struct __CFRunLoop *)arg1 callBack:(void *)arg2;
- (int)hasTimer;
- (struct _DNSServiceRef_t *)sdRef;
- (unsigned int)flags;
- (unsigned int)interfaceIndex;
- (int)errorCode;
- (unsigned int)publicAddress;
- (unsigned int)protocol;
- (unsigned short)privatePort;
- (unsigned short)publicPort;
- (unsigned int)ttl;
- (int)queryAnswered;
- (unsigned short)requestedPublicPort;
- (id)toString;
- (struct tagIPPORT)createExternalIPPort;
@property struct __CFSocket *socketRef; // @synthesize socketRef;
@property struct __CFRunLoopSource *rls; // @synthesize rls;

@end

@interface HardwareCapsChangeNotifier : NSObject
{
    struct IONotificationPort *_notificationPort;
    NSMutableDictionary *_notifierMap;
    NSMutableArray *_cameraCallbackObjs;
    NSMutableArray *_iterators;
    BOOL _hasQ8;
    BOOL _hasDV;
    unsigned int *_deviceList;
    unsigned int _numDevices;
}

+ (id)hardwareCapsChangeNotifier;
- (id)_init;
- (void)dealloc;
- (void)registerForHardwareNotification;
- (void)unregisterForHardwareNotification;
- (void)initIOKitNotifications;
- (void)createNotification:(struct __CFDictionary *)arg1 callback:(void *)arg2;
- (id)notifierMap;
- (struct IONotificationPort *)notificationPort;
- (unsigned int)numDevices;
- (unsigned int *)deviceList;
- (void)audioHardwareChanged:(id)arg1;
- (unsigned int)cameraCallbackFindParent:(unsigned int)arg1 parentClass:(const char *)arg2;
- (unsigned int)cameraCallbackCreateNotifier:(unsigned int)arg1 withIterator:(unsigned int)arg2;
- (BOOL)_isGUIDUnique:(id)arg1;
- (void)_refreshDevicePropertyListeners;
- (void)_broadcastHardwareCaps;
- (id)vcHardwareCaps;

@end

// Not exported
@interface SDPAnalyzer : NSObject
{
    NSMutableDictionary *_dict;
    NSString *_sdpUsername;
}

- (id)init;
- (id)initWithViceroyDefaultsUsingZeroes:(BOOL)arg1 forAudioOnly:(BOOL)arg2 withUserCount:(int)arg3;
- (id)initWithViceroyDefaultsUsingZeroes:(BOOL)arg1 forAudioOnly:(BOOL)arg2;
- (id)initWithViceroyDefaultsUsingZeroes:(BOOL)arg1;
- (id)initWithString:(id)arg1;
- (void)dealloc;
- (void)setSDP:(id)arg1;
- (void)resetSDP;
- (id)sessionString;
- (id)audioStringForVersion:(unsigned int)arg1;
- (id)videoStringForVersion:(unsigned int)arg1;
- (id)dataStringForVersion:(unsigned int)arg1;
- (id)toString;
- (id)toStringForVersion:(unsigned int)arg1;
- (void)setOriginWithArray:(id)arg1;
- (id)origin;
- (void)setConnectionWithArray:(id)arg1;
- (id)connection;
- (void)setBandwidthWithString:(id)arg1;
- (id)bandwidth;
- (void)setMediaWithArrayHelper:(id)arg1 mediaArray:(id)arg2 attributesArray:(id)arg3;
- (void)setAudioMediaWithArray:(id)arg1 andAttributesWithArray:(id)arg2;
- (id)audioMedia;
- (void)setVideoMediaWithArray:(id)arg1 andAttributesWithArray:(id)arg2;
- (id)videoMedia;
- (void)setDataMediaWithArray:(id)arg1 andAttributesWithArray:(id)arg2;
- (id)dataMedia;
- (id)audioMediaAttributes;
- (id)videoMediaAttributes;
- (id)dataMediaAttributes;
- (id)audioMediaConnection;
- (id)videoMediaConnection;
- (id)sessionAttributes;
- (id)sessionName;
- (int)addressTypeForConnection:(id)arg1;
- (int)addressType;
- (int)addressTypeVideo;
- (int)addressTypeAudio;
- (void)appendAudioAttribute:(id)arg1;
- (void)appendVideoAttribute:(id)arg1;
- (void)updateVideoAttributePrefix:(id)arg1 withAppendedValue:(id)arg2;
- (void)appendSessionAttribute:(id)arg1;
- (void)setSessionName:(id)arg1;
- (BOOL)hasAudioCodec:(int)arg1;
- (BOOL)hasVideoCodec:(int)arg1;
- (int)portForMediaHelper:(id)arg1;
- (int)videoPort;
- (int)audioPort;
- (int)dataPort;
- (int)videoRTCPPort;
- (int)audioRTCPPort;
- (int)dataRTCPPort;
- (const char *)userName;
- (const char *)ipFromConnection:(id)arg1;
- (const char *)ip;
- (const char *)ipVideo;
- (const char *)ipAudio;
- (int)maxImagesize;
- (int)maxBandwidth;
- (int)maxFramerate;
- (int)rulesFramerate:(int)arg1;
- (void)rulesImageSize:(int)arg1 pWidth:(int *)arg2 pHeight:(int *)arg3;
- (void)rulesPeerImageSize:(int)arg1 pWidth:(int *)arg2 pHeight:(int *)arg3;
- (char *)srtpKey;
- (char *)srtpSalt;
- (void)setMaxImageSize:(int)arg1 forPayloadType:(int)arg2;
- (void)setMaxBandwidth:(int)arg1;
- (void)setMaxFramerate:(int)arg1;
- (void)setAutoDetectBandwidth:(BOOL)arg1;
- (BOOL)autoDetectBandwidth;
- (void)setUseIChatEncryption:(BOOL)arg1;
- (BOOL)useIChatEncryption;
- (void)setAudioRTPID:(unsigned long long)arg1;
- (unsigned long long)audioRTPID;
- (void)setVideoRTPID:(unsigned long long)arg1;
- (unsigned long long)videoRTPID;
- (BOOL)hasPureVoice;
- (BOOL)hasViceroyCompatibleAudioCodec;
- (BOOL)hasViceroyCompatibleVideoCodec;
- (BOOL)hasH263;
- (BOOL)irisOpen;
- (id)generateVideoMediaArray:(BOOL)arg1;
- (id)generateVideoMediaAttributesArray:(BOOL)arg1;
- (void)setMultiPointFlagWithCount:(int)arg1;
- (BOOL)hasMultiPointFlag:(int *)arg1;
- (void)setHardwareInfo:(id)arg1;
- (id)hardwareInfo;
- (void)buildRTPMap;
- (id)RTPMapString:(int)arg1 isAudio:(BOOL)arg2;
- (int)payload:(int)arg1 isAudio:(BOOL)arg2;
- (id)payloadString:(int)arg1 isAudio:(BOOL)arg2;
- (BOOL)hasAudioCodec:(int)arg1 withPeerSDP:(id)arg2;
- (BOOL)hasVideoCodec:(int)arg1 withPeerSDP:(id)arg2;
- (id)defaultAudioPayloads;
- (id)defaultAudioPayloads:(BOOL)arg1;
- (id)defaultAudioPayloads:(BOOL)arg1 withUserCount:(int)arg2;
- (id)SDPUsername;

@end

// Not exported
@interface SIPManager : NSObject
{
    unsigned short _localSIPPort[8];
    unsigned long long _localIPAddress[8];
    unsigned short _extSIPPort[8];
    unsigned long long _extIPAddress[8];
    int _SIPInfoCount;
    struct tagHANDLE *_hSIP;
    int _transportProtocol;
    NSLock *_lock;
    NSString *_remoteUserAgent;
    NSString *_remoteDisplayName;
}

+ (id)SIPManager;
- (id)initWithTransportProtocol:(int)arg1;
- (id)init;
- (void)dealloc;
- (unsigned short)localSIPPortAtIndex:(int)arg1;
- (unsigned long long)localIPAddressAtIndex:(int)arg1;
- (unsigned short)externalSIPPortAtIndex:(int)arg1;
- (unsigned long long)externalIPAddressAtIndex:(int)arg1;
- (int)createHandle;
- (int)listen:(BOOL)arg1;
- (int)connectUsingData:(id)arg1 fromName:(id)arg2 to:(id)arg3 SDPInfo:(struct _SDPInfo *)arg4 callID:(int)arg5 rtpHandles:(struct tagRTPHANDLES *)arg6 forConfIndex:(int)arg7;
- (int)connect:(id)arg1 to:(id)arg2 ip:(id)arg3 SIPPort:(unsigned short)arg4 SDPInfo:(struct _SDPInfo *)arg5 callID:(int)arg6 rtpInfo:(struct tagRTPHANDLES *)arg7;
- (int)keyExchange:(int)arg1 toCert:(struct OpaqueSecCertificateRef *)arg2 returnKey:(const struct __CFData **)arg3 forConfIndex:(int)arg4;
- (BOOL)setDoKeyExchange:(BOOL)arg1 identity:(struct OpaqueSecIdentityRef *)arg2;
- (int)hangup:(int)arg1;
- (int)cancelConnect:(int)arg1;
- (int)connectIncoming:(char *)arg1;
- (int)sendMessage:(id)arg1 toCallID:(int)arg2;
- (int)sendMessage:(id)arg1 toAllExceptCallID:(int)arg2;
- (int)closeCall:(int)arg1;
- (id)remoteUserAgentForCallID:(int)arg1;
- (void)getRemoteInfo:(int)arg1;
- (id)getRemoteUserAgent;
- (id)getRemoteDisplayName;
- (BOOL)remoteUserAgentIsWindowsClient;
- (BOOL)ViceroyUserAgent:(id)arg1 isGreaterThanVersion:(id)arg2;
- (id)localUserAgent;
- (BOOL)setIsFocus:(BOOL)arg1;
- (BOOL)setSIPPing:(BOOL)arg1 forCallID:(int)arg2;
- (BOOL)isCurrentFocus;
- (BOOL)isRemoteFocus:(int)arg1;
- (void)updateInterfaceList;
- (id)getConnectionDataForCallID:(int)arg1 shouldFindExternalIP:(BOOL)arg2 pRelayIntIPPort:(void *)arg3 localUserName:(id)arg4;
- (id)getConnectionDataForCallID:(int)arg1 shouldFindExternalIP:(BOOL)arg2 pRelayIntIPPort:(void *)arg3 localUserName:(id)arg4 tryPreservedPort:(struct tagInternalExternalMapping *)arg5;
- (void)discardRelayBinding:(int)arg1;
- (BOOL)generateCallID:(int *)arg1;
- (int)getConnectionResultAFOnly:(int)arg1 addrFamily:(int *)arg2;
- (int)getConnectionResultSrcIPPort:(int)arg1 pSrcIPPort:(struct tagIPPORT *)arg2;
- (void)discardPreseverdPortBindingForCallID:(int)arg1;
- (int)startConnectionCheck:(int)arg1 withConnectionData:(id)arg2 remoteRelayID:(id)arg3;
- (int)connectWithCallID:(int)arg1 fromName:(id)arg2 to:(id)arg3 SDPInfo:(struct _SDPInfo *)arg4 rtpHandles:(struct tagRTPHANDLES *)arg5 forConfIndex:(int)arg6;
- (int)getCallIDForConnectionData:(id)arg1;
- (id)getIPInfoWithRemoteIPInfo:(void *)arg1 remoteIPInfoSize:(int)arg2;
- (id)getIPInfoWithRemoteIPInfo:(void *)arg1 remoteIPInfoSize:(int)arg2 shouldFindExternalIP:(BOOL)arg3;
- (void)getRelayExtIPPort:(int)arg1 pRelayExt:(void *)arg2;
- (BOOL)isRelayConference:(int)arg1;
- (void)disableSIPMessage;
- (void)enableSIPMessage;
- (void)activeDialogReady;

@end

// Not exported
@interface SNATMAPConfiguration : DotMacConfiguration
{
    _Bool hasConnected;
}

+ (id)SNATMAPConfiguration;
- (id)init;
- (void)dealloc;
- (void)getConfiguration;

@end

// Not exported
@interface VCCallMgr : NSObject
{
    NSLock *lock;
    NSMutableDictionary *dictIncomingCalls;
    NSMutableDictionary *dictOutgoingCalls;
    NSMutableDictionary *_globalAttributesDictionary;
    NSMutableDictionary *dictHangupCalls;
    NSMutableDictionary *_confStatusMap;
    NSMutableDictionary *mapUserIDToCallID;
    NSMutableDictionary *participantUserIDToConfIndex;
    NSMutableDictionary *mapUserIDToSecurityInfo;
    NSLock *_SecurityInfoLock;
    BOOL fSecurityInfoPaused;
    BOOL fSecurityEnabledValue;
    BOOL fSecurityValidValue;
    NSMutableArray *participantUpdateQueue;
    SDPAnalyzer *_callerSDP;
    SDPAnalyzer *_calleeSDP;
    int _curCallID;
    int _callIDIter;
    int _microphoneDevice;
    unsigned int _speakerDevice;
    NSDate *_callStartTime;
    double _lastCallDuration;
    struct tagRTPHANDLES _localRTPHandles;
    NSString *_localUserName;
    NSLock *_initiateLock;
    NSLock *_confStatusLock;
    NSLock *_determineFocusCapabilityLock;
    NSLock *_BWDThreadLock;
    NSLock *_deferVideoFormatLock;
    NSLock *_delegateLock;
    NSLock *_participantUserIDToConfIndexLock;
    NSLock *_userIDToCallIDMapLock;
    NSLock *_vcCameraLock;
    BOOL _didStartTransmitForNonFocus;
    BOOL _multiPartyConference;
    BOOL _isTransmitting;
    BOOL _BWDThreadRunning;
    BOOL _confStatusConnected;
    BOOL _startedAuxiliaryInput;
    VideoConferenceMultiController *_vcControllerInstance;
    id _vcDelegate;
    id _vcRenderDelegate;
    BOOL _vcDelegateConformsToDelegateProtocol;
    int _confUpstream;
    int _confDownstream;
    struct _VCFocusCapability _focusCapability;
    unsigned long long _lastCameraGUID;
    unsigned int _lastCameraDevice;
    BOOL _usePCMUWideband;
    BOOL _useSpeex;
    BOOL _useSpeex32K;
    int _auxVideoInputMode;
    BOOL _sideShowEnabled;
    BOOL _replacementMode;
    int _commNATResult;
    int _iPreviewing;
    int _iResumePreview;
    NSString *_SNATMAPIPAddress;
    unsigned short _SNATMAPPort;
    unsigned long long _ipSNATMAP;
    BOOL _multiwayBWDPauseEnabled;
}

+ (id)defaultCallMgr;
- (id)init;
- (void)dealloc;
- (void)addCall:(int)arg1 withData:(id)arg2;
- (id)getCallData:(int)arg1;
- (BOOL)existCallID:(int)arg1;
- (BOOL)acceptCallID:(int)arg1;
- (BOOL)cancelCallID:(int)arg1;
- (int)size;
- (void)addOutgoingCall:(int)arg1;
- (BOOL)existOutgoingCallID:(int)arg1 andRemove:(BOOL)arg2;
- (BOOL)hangupCall:(int)arg1;
- (void)finishedCallHangup:(int)arg1;
- (void)setCurCallID:(int)arg1;
- (int)curCallID;
- (int)getIncrementedCallIDIter;
- (int)callIDIter;
- (id)globalAttributesDictionary;
- (int)microphoneDevice;
- (int)speakerDevice;
- (void)setSpeakerDevice:(unsigned int)arg1;
- (void)setRTPHandles:(struct tagRTPHANDLES *)arg1;
- (struct tagRTPHANDLES *)RTPHandles;
- (void)startCallTimer;
- (id)callStartTime;
- (void)endCallTimer;
- (double)lastCallDuration;
- (BOOL)BWDThreadRunning;
- (void)setBWDThreadRunning:(BOOL)arg1;
- (void)setLocalUserName:(id)arg1;
- (id)localUserName;
- (id)userIDToCallIDMap;
- (int)confIndexFromMapForUserID:(id)arg1;
- (int)callIDFromMapForUserID:(id)arg1;
- (void)setPeerToPeerInfoInMapForUserID:(id)arg1 payload:(int)arg2 transmitWidth:(int)arg3 transmitHeight:(int)arg4 transmitBitrate:(int)arg5 transmitFramerate:(int)arg6;
- (void)peerToPeerInfoFromMapForUserID:(id)arg1 payload:(int *)arg2 transmitWidth:(int *)arg3 transmitHeight:(int *)arg4 transmitBitrate:(int *)arg5 transmitFramerate:(int *)arg6;
- (void)smallestNonfocusBitrate:(int *)arg1 framerate:(int *)arg2;
- (id)hardwareInfoArrayFromMap;
- (id)userIDForCallID:(unsigned int)arg1;
- (id)userIDForConfIndex:(unsigned int)arg1;
- (id)getParticipantUpdateQueue;
- (id)vcControllerInstance;
- (id)vcDelegate;
- (void)setVCControllerInstance:(id)arg1;
- (void)setVCDelegate:(id)arg1;
- (BOOL)vcDelegateConformsToDelegateProtocol;
- (void)setVCRenderDelegate:(id)arg1;
- (id)vcRenderDelegate;
- (void)setConfIndex:(int)arg1 forUserID:(id)arg2;
- (int)confIndexForUserID:(id)arg1;
- (void)clearConfIndexForUserID;
- (id)initiateLock;
- (id)confStatusLock;
- (id)userIDToCallIDMapLock;
- (id)determineFocusCapabilityLock;
- (id)deferVideoFormatLock;
- (id)vcCameraLock;
- (BOOL)didStartTransmitForNonFocus;
- (void)setDidStartTransmitForNonFocus:(BOOL)arg1;
- (BOOL)isMultiPartyConference;
- (void)setMultiPartyConference:(BOOL)arg1;
- (BOOL)isTransmitting;
- (void)setIsTransmitting:(BOOL)arg1;
- (int)BWDUpstreamKbits;
- (int)BWDDownstreamKbits;
- (void)setFocusCapability:(struct _VCFocusCapability *)arg1;
- (void)getFocusCapability:(struct _VCFocusCapability *)arg1;
- (void)confStatusMapRemoveAll;
- (void)addConfStatusForUserID:(id)arg1 status:(int)arg2 confIndex:(int)arg3 userInfo:(id)arg4;
- (void)removeConfStatus:(id)arg1;
- (void)sendConfStatusUpdateToiChat;
- (void)setConfStatusConnected:(BOOL)arg1;
- (void)setSecurityInfoCertificate:(struct OpaqueSecCertificateRef *)arg1 forUser:(id)arg2;
- (void)setSecurityInfoEnabled:(BOOL)arg1 forUser:(id)arg2;
- (void)setSecurityInfoValid:(BOOL)arg1 forUser:(id)arg2;
- (BOOL)isSecurityEnabledForUser:(id)arg1;
- (BOOL)isSecurityValidForUser:(id)arg1;
- (struct OpaqueSecCertificateRef *)getRemoteCertificateForUser:(id)arg1;
- (void)clearSecurityInfo;
- (void)setSecurityInfoPaused:(BOOL)arg1;
- (void)setLastCameraGUID:(unsigned long long)arg1;
- (unsigned long long)lastCameraGUID;
- (void)setLastCameraDevice:(unsigned int)arg1;
- (unsigned int)lastCameraDevice;
- (BOOL)startedAuxiliaryInput;
- (void)setStartedAuxiliaryInput:(BOOL)arg1;
- (BOOL)usePCMUWideband;
- (void)setUsePCMUWideband:(BOOL)arg1;
- (BOOL)useSpeex;
- (void)setUseSpeex:(BOOL)arg1;
- (BOOL)useSpeex32K;
- (void)setUseSpeex32K:(BOOL)arg1;
- (int)auxiliaryVideoInputMode;
- (void)setSideShowEnabled:(BOOL)arg1;
- (BOOL)getSideShowEnabled;
- (void)setReplacementMode:(BOOL)arg1;
- (BOOL)getReplacementMode;
- (void)setAuxiliaryVideoInputMode:(int)arg1;
- (void)setCommNATResult:(int)arg1;
- (int)commNATResult;
- (void)addCommNATResultToErrorReporter;
@property int _iResumePreview; // @synthesize _iResumePreview;
@property int _iPreviewing; // @synthesize _iPreviewing;
@property(getter=isMultiwayBWDPauseEnabled) BOOL multiwayBWDPauseEnabled; // @synthesize multiwayBWDPauseEnabled=_multiwayBWDPauseEnabled;
@property unsigned long long _ipSNATMAP; // @synthesize _ipSNATMAP;
@property unsigned short _SNATMAPPort; // @synthesize _SNATMAPPort;
@property(copy) NSString *_SNATMAPIPAddress; // @synthesize _SNATMAPIPAddress;

@end

// Not exported
@interface VCCamera : NSObject
{
    NSString *_displayName;
    NSString *_driverName;
    NSString *_inputName;
    NSString *_GUID;
    VCMicrophone *_associatedMicrophone;
    unsigned int _deviceID;
    int _type;
    BOOL _visible;
    BOOL _isSuspended;
    BOOL _isWidescreen;
}

- (id)init;
- (void)dealloc;
- (id)displayName;
- (id)GUID;
- (unsigned int)CMIODeviceID;
- (id)associatedMicrophone;
- (int)type;
- (BOOL)visible;
- (BOOL)irisOpen;
- (BOOL)isSuspended;
- (BOOL)isWidescreen;
- (id)initWithDisplayName:(id)arg1 driverName:(id)arg2 inputName:(id)arg3 GUID:(id)arg4 CMIODeviceID:(unsigned int)arg5 associatedMicrophone:(id)arg6;
- (void)setType:(int)arg1;
- (void)setVisible:(BOOL)arg1;
- (void)setIsSuspended:(BOOL)arg1;
- (void)setIsWidescreen:(BOOL)arg1;

@end

@interface VCChannel : NSObject
{
    VCChannelModel *_model;
}

+ (id)OpenNewChannelWithOptions:(id)arg1;
- (id)init;
- (id)initWithOptions:(id)arg1;
- (void)dealloc;
- (id)connectionData;
- (id)connectionData:(BOOL)arg1;
- (void)prepareConnectionWithRemoteConnectionData:(id)arg1;
- (int)socket;
- (id)remoteIPPort;
- (void)close;
- (void)setSavedConnectionData:(id)arg1;
- (id)getSavedConnectionData;

@end

// Not exported
@interface VCChannelExtra : NSObject
{
    VCChannelModel *_model;
}

- (id)init;
- (id)initWithHandle:(struct tagHANDLE *)arg1;
- (void)dealloc;
- (struct tagHANDLE *)currentHandle;
- (void)closeHandle;
- (id)connectionDataWithOptions:(id)arg1;
- (id)connectionDataWithOptions:(id)arg1 shouldFindExternalIP:(BOOL)arg2;
- (void)prepareExtraConnectionWithRemoteConnectionData:(id)arg1 withLocalConnectionData:(id)arg2;
- (void)sockets:(int *)arg1 size:(int)arg2;
- (id)remoteIPPorts:(int)arg1;

@end

// Not exported
@interface VCChannelModel : NSObject
{
    struct tagHANDLE *_hVCChannel;
    NSData *_localConnectionData;
    NSDictionary *_optionsDictionary;
}

- (id)init;
- (void)dealloc;
- (struct tagHANDLE *)hVCChannel;
- (id)localConnectionData;
- (id)optionsDictionary;
- (void)sethVCChannel:(struct tagHANDLE *)arg1;
- (void)setLocalConnectionData:(id)arg1;
- (void)setOptionsDictionary:(id)arg1;

@end

// Not exported
@interface VCDispatchQueues : NSObject
{
    struct dispatch_queue_s *vcdispatch_serialq;
    struct dispatch_queue_s *aConcurrentQ[12];
}

+ (id)dispatchQueues;
- (id)init;
- (void)dealloc;
- (struct dispatch_queue_s *)serialq;
- (struct dispatch_queue_s *)concurrentqAtIndex:(int)arg1;

@end

// Not exported
@interface VCSoundDevice : NSObject
{
    NSString *_displayName;
    NSString *_deviceName;
    NSString *_sourceName;
    unsigned int _deviceID;
    unsigned int _sourceID;
    unsigned int _transportType;
    BOOL _isBluetooth;
}

- (id)init;
- (void)dealloc;
- (id)deviceName;
- (id)sourceName;
- (id)displayName;
- (unsigned int)deviceID;
- (unsigned int)sourceID;
- (unsigned int)transportType;
- (BOOL)isBluetooth;

@end

// Not exported
@interface VCMicrophone : VCSoundDevice
{
}

- (id)init;
- (unsigned int)transportType;
- (id)initWithDisplayName:(id)arg1 deviceName:(id)arg2 sourceName:(id)arg3 deviceID:(unsigned int)arg4 sourceID:(unsigned int)arg5 isBluetooth:(BOOL)arg6;

@end

// Not exported
@interface VCNotificationGateway : NSObject
{
    BOOL _ignoreNoRemotePackets;
}

- (id)init;
- (void)dealloc;
- (id)startMonitor;
- (id)endMonitor;
- (void)setIgnoreNoRemotePackets:(BOOL)arg1;
- (BOOL)ignoreNoRemotePackets;

@end

// Not exported
@interface VCPowerNotifier : NSObject
{
    NSObject<NotificationObserver> *observer;
}

+ (id)VCPowerNotifier;
- (id)init;
- (id)setNotificationObserver:(id)arg1;
- (void)dealloc;
- (void)startNotifications;
- (BOOL)getPowerUpdate:(float *)arg1 cpuCount:(int *)arg2 scheduleLimit:(float *)arg3;

@end

// Not exported
@interface VCRules : NSObject
{
    VCRulesCPUList *_VCRulesCPUList;
    NSMutableArray *_arrayHardwareRules;
    NSMutableArray *_arrayHardwareRulesH264;
    NSMutableArray *_arrayDowngradeRulesH264;
    NSMutableArray *_arrayDowngradeRules;
}

+ (id)VCRulesSingleton;
+ (unsigned int)QuickTimeBandwidth;
+ (void)parametersForRules:(id)arg1 pFramerate:(int *)arg2 pWidth:(int *)arg3 pHeight:(int *)arg4;
+ (BOOL)canSupportH264Encode;
+ (BOOL)canSupportH264Decode;
+ (BOOL)isHardwareSuitableForFilters;
+ (void)updateImageSize:(int *)arg1 forBandwidth:(int)arg2;
+ (unsigned int)minAudioBandwidth;
+ (unsigned int)minVideoBandwidth;
+ (unsigned short)cutoff15FPS;
+ (unsigned int)magicRTCBandwidth;
+ (unsigned int)minCPUSpeedForH264;
+ (struct CGSize)applyImageSizeDowngradeRuleForPayload:(int)arg1 currentSize:(struct CGSize)arg2 bitrate:(int)arg3 pFramerate:(int *)arg4 inMultiway:(BOOL)arg5;
+ (id)generateHardwareInfoForSDP;
+ (void)parseSDPHardwareInfo:(id)arg1 forMachineType:(int *)arg2 forCPUCount:(int *)arg3 forCPUSpeed:(int *)arg4;
+ (void)getMultipointInfoForPayload:(int)arg1 imageWidth:(int *)arg2 imageHeight:(int *)arg3 framerate:(int *)arg4;
+ (BOOL)canSupportSpeexPayload:(int)arg1 audioOnly:(BOOL)arg2;
+ (BOOL)canSupportPCMUWideband:(BOOL)arg1;
+ (BOOL)canSupportAACLD:(int)arg1 audioOnly:(BOOL)arg2;
- (void)addAllRules;
- (void)addT1RulesForMhrtz:(int)arg1 cpuCount:(int)arg2;
- (id)init;
- (void)dealloc;
- (id)arrayHardwareRules;
- (id)arrayHardwareRulesH264;
- (id)arrayDowngradeRulesH264;
- (id)arrayDowngradeRules;
- (void)loadOtherRules;
- (id)cpuTypeStringForMachineType:(int)arg1;
- (BOOL)determineLocalRulesForBandwidthAndSize:(unsigned int)arg1 currentWidth:(int)arg2 currentHeight:(int)arg3 participants:(int)arg4 conferenceType:(int)arg5 width:(int *)arg6 height:(int *)arg7 framerate:(int *)arg8;
- (BOOL)localRulesForBandwidth:(unsigned int)arg1 participants:(int)arg2 conferenceType:(int)arg3 width:(int *)arg4 height:(int *)arg5 framerate:(int *)arg6;
- (int)bestFramerateForConferenceType:(int)arg1 imageWidth:(int)arg2 imageHeight:(int)arg3;
- (void)bestH263Settings:(int *)arg1 framerate:(int *)arg2;
- (void)bestH263SettingsForBandwidth:(int)arg1 width:(int *)arg2 height:(int *)arg3 framerate:(int *)arg4;
- (void)bestH264SettingsFramerate:(int *)arg1 width:(int *)arg2 height:(int *)arg3;
- (void)bestH264MultipointSettingsForTotalBandwidthAndUserCount:(int)arg1 userCount:(int)arg2 width:(int *)arg3 height:(int *)arg4 framerate:(int *)arg5;

@end

// Not exported
@interface VCRulesBandwidth : NSObject
{
    int _bandwidth;
    int _bandwidthLowerThreshold;
    int _bandwidthUpperThreshold;
    VCRulesImageSizeList *_H264Focus;
    VCRulesImageSizeList *_H264NonFocus;
    VCRulesImageSizeList *_H263;
}

- (id)initWithBandwidthLowerThreshold:(int)arg1 upperThreshold:(int)arg2;
- (void)dealloc;
- (id)description;
- (void)addRuleWithNParticipants:(int)arg1 width:(int)arg2 height:(int)arg3 fps:(int)arg4 conferenceType:(int)arg5;
- (id)imageSizeForNParticipants:(int)arg1 conferenceType:(int)arg2;
- (void)addRuleWithNParticipants:(int)arg1 width:(int)arg2 height:(int)arg3 fps:(int)arg4 type:(id)arg5;
- (id)imageSizeForNParticipants:(int)arg1 type:(id)arg2;
- (int)bandwidth;
- (void)setBandwidth:(int)arg1;
- (int)bandwidthLowerThreshold;
- (void)setBandwidthLowerThreshold:(int)arg1;
- (int)bandwidthUpperThreshold;
- (void)setBandwidthUpperThreshold:(int)arg1;
- (id)H264Focus;
- (void)setH264Focus:(id)arg1;
- (id)H264NonFocus;
- (void)setH264NonFocus:(id)arg1;
- (id)H263;
- (void)setH263:(id)arg1;

@end

// Not exported
@interface VCRulesBandwidthList : NSObject
{
    NSMutableArray *_bandwidthList;
}

- (id)init;
- (void)dealloc;
- (id)addBandwidthLowerThreshold:(int)arg1 upperThreshold:(int)arg2;
- (id)bandwidthWithLowerThreshold:(int)arg1 upperThreshold:(int)arg2;
- (void)addRuleWithBandwidthLowerThreshold:(int)arg1 upperThreshold:(int)arg2 nParticipants:(int)arg3 width:(int)arg4 height:(int)arg5 fps:(int)arg6 type:(id)arg7;
- (id)imageSizeForBandwidth:(int)arg1 nParticipants:(int)arg2 type:(id)arg3;
- (void)addRuleWithBandwidthLowerThreshold:(int)arg1 upperThreshold:(int)arg2 nParticipants:(int)arg3 width:(int)arg4 height:(int)arg5 fps:(int)arg6 conferenceType:(int)arg7;
- (id)imageSizeForBandwidth:(int)arg1 nParticipants:(int)arg2 conferenceType:(int)arg3;
- (id)description;
- (id)bandwidthList;
- (void)setBandwidthList:(id)arg1;

@end

// Not exported
@interface VCRulesCPU : NSObject
{
    NSString *_cpuType;
    int _nProcessors;
    int _frequency;
    VCRulesBandwidthList *_bandwidthList;
}

- (id)initWithCPUType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3;
- (void)dealloc;
- (id)description;
- (void)addRuleWithBandwidthLowerThreshold:(int)arg1 upperThreshold:(int)arg2 nParticipants:(int)arg3 width:(int)arg4 height:(int)arg5 fps:(int)arg6 type:(id)arg7;
- (id)imageSizeForBandwidth:(int)arg1 nParticipants:(int)arg2 type:(id)arg3;
- (void)addRuleWithBandwidthLowerThreshold:(int)arg1 upperThreshold:(int)arg2 nParticipants:(int)arg3 width:(int)arg4 height:(int)arg5 fps:(int)arg6 conferenceType:(int)arg7;
- (id)imageSizeForBandwidth:(int)arg1 nParticipants:(int)arg2 conferenceType:(int)arg3;
- (long long)compareCPU:(id)arg1;
- (id)cpuType;
- (void)setCPUType:(id)arg1;
- (int)nProcessors;
- (void)setNProcessors:(int)arg1;
- (int)frequency;
- (void)setFrequency:(int)arg1;
- (id)bandwidthList;
- (void)setBandwidthList:(id)arg1;

@end

// Not exported
@interface VCRulesCPUList : NSObject
{
    NSMutableArray *_cpuList;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (id)addCPUwithType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3;
- (id)cpuWithType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3;
- (void)addRuleForCPUWithType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3 lowerThreshold:(int)arg4 upperThreshold:(int)arg5 nParticipants:(int)arg6 width:(int)arg7 height:(int)arg8 fps:(int)arg9 type:(id)arg10;
- (id)imageSizeForCPUWithType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3 bandwidth:(int)arg4 nParticipants:(int)arg5 type:(id)arg6;
- (void)addRuleForCPUWithType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3 lowerThreshold:(int)arg4 upperThreshold:(int)arg5 nParticipants:(int)arg6 width:(int)arg7 height:(int)arg8 fps:(int)arg9 conferenceType:(int)arg10;
- (id)imageSizeForCPUWithType:(id)arg1 nProcessors:(int)arg2 frequency:(int)arg3 bandwidth:(int)arg4 nParticipants:(int)arg5 conferenceType:(int)arg6;
- (id)cpuList;
- (void)setCPUList:(id)arg1;

@end

// Not exported
@interface VCRulesImageSize : NSObject
{
    int _nParticipants;
    int _width;
    int _height;
    int _fps;
}

- (id)initWithNParticipants:(int)arg1 width:(int)arg2 height:(int)arg3 fps:(int)arg4;
- (id)description;
- (int)nParticipants;
- (void)setNParticipants:(int)arg1;
- (int)width;
- (void)setWidth:(int)arg1;
- (int)height;
- (void)setHeight:(int)arg1;
- (int)fps;
- (void)setFps:(int)arg1;

@end

// Not exported
@interface VCRulesImageSizeList : NSObject
{
    NSMutableArray *_imageSizeList;
    NSString *_type;
}

- (id)init;
- (id)initWithType:(id)arg1;
- (void)dealloc;
- (void)addImageSizeWithNParticipants:(int)arg1 width:(int)arg2 height:(int)arg3 fps:(int)arg4;
- (id)imageSizeForNParticipants:(int)arg1;
- (id)description;
- (id)imageSizeList;
- (void)setImageSizeList:(id)arg1;
- (id)type;
- (void)setType:(id)arg1;

@end

// Not exported
@interface VCSNATMAPData : NSObject
{
    unsigned char _dataVersion;
    unsigned int _iChatAVVersion;
    unsigned int _OSVersion;
    unsigned int _ViceroyVersion;
    unsigned short _mediaType;
    unsigned int _sessionID;
}

- (id)init;
- (void)dealloc;
- (void)setiChatAVVersion:(unsigned int)arg1;
- (void)setViceroyVersion:(unsigned int)arg1;
- (void)setMediaType:(unsigned short)arg1;
- (void)setSessionID:(unsigned int)arg1;
- (id)snatmapData;

@end

// Not exported
@interface VCSleepWakeMonitor : NSObject
{
    unsigned int root_port;
    unsigned int notifierObject;
    struct IONotificationPort *notifyPortRef;
}

+ (id)VCSleepWakeMonitorSingleton;
- (BOOL)startMonitor;
- (void)endMonitor;
- (unsigned int)rootPort;

@end

// Not exported
@interface VCSpeaker : VCSoundDevice
{
}

- (id)init;
- (unsigned int)transportType;
- (id)initWithDisplayName:(id)arg1 deviceName:(id)arg2 sourceName:(id)arg3 deviceID:(unsigned int)arg4 sourceID:(unsigned int)arg5 isBluetooth:(BOOL)arg6;

@end

// Not exported
@interface VCStateMgr : NSObject <NSLocking>
{
    NSLock *lock;
    int _videoConferenceState;
    NSDictionary *_hardwareCaps;
}

+ (id)defaultStateMgr;
- (id)init;
- (void)dealloc;
- (char *)stateName:(int)arg1;
- (BOOL)setStateAndLock:(int)arg1 from:(int)arg2;
- (void)setStateUnlock;
- (int)state;
- (void)lock;
- (void)unlock;
- (void)setHardwareCaps:(id)arg1;
- (id)hardwareCaps;

@end

@interface VideoConferenceController : NSObject
{
    NSString *_localIPAddress;
    NSString *_userName;
    BOOL _allowsVideoRecv;
    BOOL _allowsAudioRecv;
    BOOL _allowsVideoSend;
    BOOL _allowsAudioSend;
    BOOL _enableEchoCancellation;
    BOOL _enableOldAudioProcessing;
    BOOL _enableNewAudioProcessing;
    unsigned int _bitrate;
    unsigned int _framerate;
    unsigned int _keyrate;
    unsigned int _maxBitrate;
    unsigned int _maxFramerate;
    int _optimalImageSize;
    BOOL _doNotDisturb;
    BOOL _preFilter;
    BOOL _postFilter;
    int _lightingProfile;
    int _defaultPayload;
    int _defaultWidth;
    int _defaultHeight;
    NSString *_remoteUserName;
    int _audioQuality;
    BOOL _useEncryption;
    struct OpaqueSecIdentityRef *_localSecIdentityRef;
    BOOL _autoDetectBandwidth;
    NSMutableDictionary *_statsDictionary;
    VCNotificationGateway *_notificationGateway;
    NATTraversal *_NATTraversal;
    struct __SCDynamicStore *_dynamicStore;
    NSMutableDictionary *_connectionDataAndCallIDDictionary;
    BOOL _oneWayOnly;
    BOOL _SDForced;
    NSString *_cameraName;
    NSString *_cameraGUID;
    unsigned int _cameraDeviceID;
}

+ (void)initialize;
+ (id)newcameraList;
+ (id)cameraList;
+ (id)microphoneList;
+ (id)micList;
+ (id)speakerList;
+ (id)soundOutputDeviceList;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)setRenderDelegate:(id)arg1;
- (id)renderDelegate;
- (void)resetVars;
- (void)freeVars;
- (void)cpuUpdateProc:(id)arg1;
- (void)doInitialCPUUpdate;
- (void)updateCPUPower:(float)arg1 cpuCount:(int)arg2 scheduleLimit:(float)arg3;
- (id)init;
- (id)initWithRectTexture:(int)arg1;
- (void)setRectTexture:(int)arg1;
- (void)setCPUResize:(int)arg1;
- (id)initWithLocalIPAddress:(id)arg1;
- (void)setLocalIPAddress:(id)arg1;
- (id)localIPAddress;
- (void)setUserName:(id)arg1;
- (id)userName;
- (void)setAllowsVideo:(BOOL)arg1;
- (BOOL)allowsVideo;
- (void)setAllowsAudio:(BOOL)arg1;
- (BOOL)allowsAudio;
- (void)setAllowsVideoSend:(BOOL)arg1;
- (BOOL)allowsVideoSend;
- (void)setAllowsAudioSend:(BOOL)arg1;
- (BOOL)allowsAudioSend;
- (void)setAllowsVideoRecv:(BOOL)arg1;
- (BOOL)allowsVideoRecv;
- (void)setAllowsAudioRecv:(BOOL)arg1;
- (BOOL)allowsAudioRecv;
- (void)setBitrate:(unsigned int)arg1;
- (unsigned int)bitrate;
- (void)setFramerate:(unsigned int)arg1;
- (unsigned int)framerate;
- (void)setKeyrate:(unsigned int)arg1;
- (unsigned int)keyrate;
- (void)setOptimalImageSize:(int)arg1;
- (int)optimalImageSize;
- (void)setMaxBitrate:(unsigned int)arg1;
- (unsigned int)maxBitrate;
- (void)setMaxFramerate:(unsigned int)arg1;
- (unsigned int)maxFramerate;
- (void)setEnableEchoCancellation:(BOOL)arg1;
- (BOOL)enableEchoCancellation;
- (void)setEnableNoiseReduction:(BOOL)arg1;
- (BOOL)enableNoiseReduction;
- (void)setIgnoreNoRemotePackets:(BOOL)arg1;
- (BOOL)ignoreNoRemotePackets;
- (unsigned int)localSIPPort;
- (unsigned int)externalSIPPort;
- (id)externalIPAddress;
- (void)dealloc;
- (void)setRemoteUserName:(id)arg1;
- (id)remoteUserName;
- (BOOL)canStartPreview;
- (int)startPreview;
- (BOOL)fixCameraProperties:(BOOL)arg1;
- (BOOL)fixCameraFeature:(int)arg1 isFixed:(BOOL)arg2;
- (void)setAudioQuality:(int)arg1;
- (int)audioQuality;
- (void)setAutoDetectBandwidth:(BOOL)arg1;
- (BOOL)autoDetectBandwidth;
- (void)setDoNotDisturb:(BOOL)arg1;
- (BOOL)doNotDisturb;
- (int)cancelInitiatedConferenceCallWithRemoteIPAddress:(id)arg1 remoteSIPPort:(unsigned short)arg2;
- (int)DoVCIncomingConference:(void *)arg1;
- (void)muteParty:(int)arg1 shouldMute:(BOOL)arg2;
- (BOOL)isPartyMuted:(int)arg1;
- (void)pauseParty:(int)arg1 shouldPause:(BOOL)arg2;
- (BOOL)isPartyPaused:(int)arg1;
- (int)setAudioVolume:(float)arg1;
- (float)audioVolume;
- (void)VCSendMessageProc:(id)arg1;
- (void)handleWorkspaceNotification:(id)arg1;
- (void)handleFrameworkNotification:(id)arg1;
- (int)cancelPreview;
- (int)setMicrophoneGain:(float)arg1;
- (float)microphoneGain;
- (float)microphoneLevel;
- (float)speakerLevel;
- (int)upstreamBandwidthToUserID:(id)arg1;
- (int)upstreamAudioBandwidthToUserID:(id)arg1;
- (BOOL)openCamera;
- (BOOL)closeCamera;
- (BOOL)selectCameraByGUID:(id)arg1;
- (BOOL)selectCameraWithTundraDeviceID:(unsigned int)arg1;
- (BOOL)selectCameraWithCMIODeviceID:(unsigned int)arg1;
- (id)selectedCamera;
- (BOOL)selectCamera:(id)arg1;
- (id)cameraName;
- (BOOL)selectMicrophone:(id)arg1;
- (id)selectedMicrophone;
- (id)findMovieMic;
- (BOOL)selectMic:(id)arg1;
- (id)micName;
- (BOOL)selectSpeaker:(id)arg1;
- (id)selectedSpeaker;
- (BOOL)selectSoundOutputDevice:(id)arg1;
- (id)soundOutputDeviceName;
- (BOOL)setColor:(float)arg1;
- (float)color;
- (BOOL)setBrightness:(float)arg1;
- (float)brightness;
- (BOOL)setContrast:(float)arg1;
- (float)contrast;
- (BOOL)setFocus:(float)arg1;
- (float)focus;
- (BOOL)setSharpness:(float)arg1;
- (float)sharpness;
- (void)setLightingProfile:(int)arg1;
- (int)lightingProfile;
- (void)iChatWillFileTransfer;
- (void)iChatDidFileTransfer;
- (id)snatmapDataObj;
- (void)setSNATMAPData:(id)arg1;
- (int)properConfIndexForUser:(id)arg1;
- (id)getErrorReport;
- (void)shutdownAV;
- (void)releaseRouterMappings;
- (int)createVTPAndGetRealPort:(unsigned short *)arg1 forInterface:(struct tagIPPORT *)arg2;
- (void)createUPnPMappings;
- (int)getNATMappedPorts:(struct tagIPPORT **)arg1 numPortsOut:(int *)arg2;
- (BOOL)setAudioAndVideoPayload:(id)arg1 forConferenceIndex:(int)arg2 forUserAgent:(id)arg3;
- (BOOL)setAudioAndVideoPayload:(id)arg1 forConferenceIndex:(int)arg2 forUserAgent:(id)arg3 forPeerSDP:(id)arg4;
- (id)getSIPDataAndIPListFromRemoteIPAndPortData:(id)arg1 ipList:(id)arg2;
- (BOOL)hasCamera;
- (BOOL)_openCamera;
- (BOOL)_closeCamera;
- (BOOL)_selectCameraByGUID:(id)arg1;
- (BOOL)_selectCameraWithCMIODeviceID:(unsigned int)arg1;
- (id)_selectedCamera;
- (void)setConferenceBitrate:(int)arg1;
- (id)currentCameraName;
- (void)setCurrentCameraName:(id)arg1;
- (id)currentCameraGUID;
- (void)setCurrentCameraGUID:(id)arg1;
- (unsigned int)currentCameraDeviceID;
- (void)setCurrentCameraDeviceID:(unsigned int)arg1;
- (int)processCVPixelBuffer:(void *)arg1 intoCVPixelBuffer:(void *)arg2 withHint:(id)arg3;
- (void)setInternalSamplingRateFromDefaults;
- (BOOL)selectMovieMic;
- (void)discardPreservedPortBindingForCallID:(int)arg1;
- (void)allowGSM:(BOOL)arg1;
- (void)allowG711:(BOOL)arg1;
- (void)allowPureVoice:(BOOL)arg1;
- (int)cameraFeatureID:(id)arg1;
- (int)setCameraFeature:(int)arg1 enabled:(int)arg2 value:(float)arg3 automatic:(int)arg4;
- (int)getCameraFeature:(int)arg1 enabled:(int *)arg2 value:(float *)arg3 automatic:(int *)arg4;
- (int)getCameraFeatureDefaults:(int)arg1 enabled:(int *)arg2 value:(float *)arg3 automatic:(int *)arg4;
- (int)getCameraFeatureRange:(int)arg1 minValue:(float *)arg2 maxValue:(float *)arg3 hasManual:(int *)arg4 hasAuto:(int *)arg5;
- (int)setCameraFocusPoint:(float)arg1 y:(float)arg2;
- (int)getCameraFocusPoint:(float *)arg1 y:(float *)arg2;
- (int)getCameraFocusPointDefaults:(float *)arg1 y:(float *)arg2;
- (int)setCameraAreaOfInterest:(float)arg1 y:(float)arg2 width:(float)arg3 height:(float)arg4;
- (int)getCameraAreaOfInterest:(float *)arg1 y:(float *)arg2 width:(float *)arg3 height:(float *)arg4;
- (int)getCameraAreaOfInterestDefaults:(float *)arg1 y:(float *)arg2 width:(float *)arg3 height:(float *)arg4;
- (void)setEncryption:(BOOL)arg1;
- (BOOL)encryption;
- (void)setEchoCancellation:(BOOL)arg1;
- (BOOL)echoCancellation;
- (void)setAGC:(BOOL)arg1;
- (BOOL)AGC;
- (void)setOldAudioProcessing:(BOOL)arg1;
- (BOOL)oldAudioProcessing;
- (void)setNewAudioProcessing:(BOOL)arg1;
- (BOOL)newAudioProcessing;
- (void)setPreFilter:(int)arg1 enabled:(BOOL)arg2;
- (BOOL)preFilter:(int)arg1;
- (void)setPostFilter:(BOOL)arg1;
- (BOOL)postFilter;
- (id)cameraSettingsData;
- (BOOL)setCameraSettingsData:(id)arg1;
- (BOOL)enableFocus:(BOOL)arg1;
- (int)sendChatMessage:(id)arg1;
- (id)bandwidthDictionaryForUserID:(id)arg1;
- (BOOL)addUserIDToMap:(id)arg1 withInfo:(id)arg2;
- (BOOL)removeUserIDFromMap:(id)arg1;
- (int)userIDMapCount;
- (void)clearUserIDToCallIDMap;
- (void)invalidateCallIDForUserID:(id)arg1;
- (BOOL)existUserIDInUserIDMap:(id)arg1;
- (void)updateDictionaryForUserID:(id)arg1 withSubKey:(id)arg2 andValue:(id)arg3;
- (id)dictionaryForUserID:(id)arg1;
- (id)dictionaryForPeer;
- (void)setSDForced:(BOOL)arg1;
- (BOOL)isSDForced;
- (BOOL)IsSideShowAvailable;
- (BOOL)enableReplacementVideoInputWithName:(id)arg1;
- (void)disableReplacementInput;
- (void)requestAuxiliaryVideoInput;
- (void)setAuxiliaryVideoInputMode:(int)arg1;
- (void)auxiliaryInputReady;
- (void)disableAuxiliaryVideoInput;
- (id)audioReflectorGUID;
- (int)audioReflectorChannel;
- (id)audioReflectorChannels:(int)arg1;
- (BOOL)requestReflectorChannels:(id)arg1;
- (int)startAuxiliaryReflector;
- (void)stopAuxiliaryReflector;
- (void)muteAuxiliaryAudio:(BOOL)arg1;
- (void)muteAuxiliaryAudioLocalPlayback:(BOOL)arg1;
- (void)setAuxiliaryAudioVolume:(float)arg1;
- (float)auxiliaryAudioVolume;
- (struct CGSize)auxVideoBufferSizeForParty:(id)arg1 replacementOnly:(BOOL)arg2;
- (BOOL)enableU2Input;
- (void)disableU2Input;
- (void)sendHardwareCapsChange:(BOOL)arg1;

@end

@interface VideoConferenceMultiController : VideoConferenceController
{
}

+ (id)makeIPAndPortDataFromIP:(id)arg1 port:(unsigned short)arg2;
- (id)init;
- (id)initWithRectTexture:(int)arg1;
- (void)dealloc;
- (void)setValidatedIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (struct OpaqueSecIdentityRef *)getValidatedIdentity;
- (BOOL)isSecurityEnabledForUser:(id)arg1;
- (BOOL)isSecurityValidForUser:(id)arg1;
- (BOOL)isSecurityEnabled;
- (BOOL)isSecurityValid;
- (struct OpaqueSecCertificateRef *)getRemoteCertificateForUser:(id)arg1;
- (id)IPAndPortDataWithCallerIPAndPortData:(id)arg1;
- (id)IPAndPortDataWithCallerIPAndPortData:(id)arg1 shouldFindExternalIP:(BOOL)arg2;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3 withValidatedCert:(struct OpaqueSecCertificateRef *)arg4;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3 withValidatedCert:(struct OpaqueSecCertificateRef *)arg4 shouldFindExternalIP:(BOOL)arg5;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3 shouldFindExternalIP:(BOOL)arg4;
- (int)endConference;
- (int)endConferenceForUserID:(id)arg1;
- (BOOL)startReflector;
- (BOOL)stopReflector;
- (int)reflectorChannelForUserID:(id)arg1;
- (void)setReflectorIconForUserID:(id)arg1 icon:(struct __CFData *)arg2;
- (unsigned long long)vcCapabilities;
- (unsigned long long)vcCapabilitiesOfCPU;
- (unsigned long long)vcCapabilitiesOfNetwork;
- (unsigned long long)vcCapabilitiesOfRouter;
- (BOOL)isFocus;
- (BOOL)startConferenceWithUserID:(id)arg1;
- (int)DoVCIncomingConference:(void *)arg1;
- (BOOL)startConferenceWithIndex:(int)arg1 userAtIndexIsCaller:(BOOL)arg2 userIDAtIndex:(id)arg3;
- (id)statistics;
- (id)statistics:(int)arg1;
- (double)conferenceUptime;
- (id)audioLevelForUserID:(id)arg1;
- (BOOL)getLocalVideoTextureBuffer:(CDStruct_79ad071c *)arg1;
- (BOOL)isLocalVideoChanged;
- (BOOL)isRemoteVideoChangedForUser:(id)arg1;
- (BOOL)lockVideoBufferForUser:(id)arg1;
- (BOOL)unlockVideoBufferForUser:(id)arg1;
- (BOOL)lockVideoBufferForUser:(id)arg1 lockID:(int *)arg2;
- (BOOL)unlockVideoBufferForUser:(id)arg1 lockID:(int)arg2;
- (BOOL)getRemoteVideoTextureBuffer:(CDStruct_79ad071c *)arg1 forUser:(id)arg2;
- (BOOL)getRemoteVideoTextureBuffer:(CDStruct_79ad071c *)arg1 forUser:(id)arg2 freezeFlag:(BOOL)arg3;
- (unsigned int)localSIPPort;
- (unsigned int)externalSIPPort;
- (id)externalIPAddress;
- (id)IPAndPortDataWithCallerIP:(id)arg1 callerSIPPort:(unsigned int)arg2;
- (id)IPAndPortDataWithCallerIP:(id)arg1 callerSIPPort:(unsigned int)arg2 shouldFindExternalIP:(BOOL)arg3;
- (void)hangupThreadProc:(id)arg1;
- (void)launchHangupThread:(int)arg1;
- (void)determineFocusCapabilityProc:(id)arg1;
- (void)updateFocusTransmitParameters:(int)arg1;
- (void)updateFocusCapabilityForBandwidth:(struct _VCFocusCapability *)arg1 upstreamKbits:(int)arg2 downstreamKbits:(int)arg3;
- (void)determineFocusCapability:(struct _VCFocusCapability *)arg1 isVideoHardwareCapable:(char *)arg2;
- (void)determineFocusCapabilityOfCPU:(struct _VCFocusCapability *)arg1;
- (void)determineFocusCapabilityOfNetwork:(struct _VCFocusCapability *)arg1;
- (void)handleCleanupForUser:(id)arg1 withCallID:(int)arg2 endTransmit:(BOOL)arg3 andSendSIPHangup:(BOOL)arg4;
- (void)setAudioHalfRate:(BOOL)arg1 forConfIndex:(int)arg2;
- (void)printCapabilities:(unsigned long long)arg1;
- (int)doPeerToPeerBandwidthDetectionForIndex:(int)arg1 pUpstreamKbits:(int *)arg2 pDownstreamKbits:(int *)arg3 withSNATMAPIP:(unsigned long long)arg4 withCallID:(int)arg5 withUserID:(id)arg6;
- (struct OpaqueSecIdentityRef *)localSecIdentityRef;
- (id)VCConnectionDataWithExtraChannels:(id)arg1 shouldFindExternalIP:(BOOL)arg2;
- (id)VCConnectionDataWithExtraChannels:(id)arg1;
- (id)VCConnectionData;
- (id)VCConnectionData:(BOOL)arg1;
- (id)VCConnectionDataWithAttributes:(id)arg1;
- (void)prepareConnectionWithRemoteConnectionData:(id)arg1 localConnectionData:(id)arg2;
- (void)cancelPreparingConnection:(id)arg1;
- (int)initiateConferenceToUser:(id)arg1 withRemoteVCConnectionData:(id)arg2 withLocalVCConnectionData:(id)arg3 conferenceSettings:(id)arg4;
- (int)initiateConferenceToUser:(id)arg1 withRemoteVCConnectionData:(id)arg2 withLocalVCConnectionData:(id)arg3 conferenceSettings:(id)arg4 shouldFindExternalIP:(BOOL)arg5;
- (id)extraChannelsForVCConnectionData:(id)arg1;
- (int)callIDForVCConnectionData:(id)arg1;
- (id)connectionDataForIPAndPortData:(id)arg1;
- (id)bandwidthDictionary;
- (id)VCChannelExtraDictionary:(id)arg1 withHandle:(struct tagHANDLE *)arg2;
- (id)SIPICEDataForCallID:(int)arg1 shouldFindExternalIP:(BOOL)arg2 relayInfo:(id)arg3;
- (id)generateVCConnectionDataWithVersion:(int)arg1 SIPICEData:(id)arg2 bandwidthDictionary:(id)arg3 connectionHelper:(id)arg4 VCChannelExtraObj:(id)arg5 relayInfo:(id)arg6;
- (id)IPAndPortDataForConnectionData:(id)arg1;
- (id)extractObjectFromVCConnectionData:(id)arg1 byKey:(id)arg2;
- (id)extractConnectionDataFromVCConnectionData:(id)arg1;
- (id)extractIPAndPortDataFromVCConnectionData:(id)arg1;
- (id)extractVersionFromVCConnectionData:(id)arg1;
- (id)extractBandwidthInfoFromVCConnectionData:(id)arg1;
- (id)extractVCChannelExtraFromVCConnectionData:(id)arg1;
- (id)extractRelayIDFromVCConnectionData:(id)arg1;
- (id)extractConnectionHelperInfoFromVCConnectionData:(id)arg1;
- (BOOL)hasVCChannelExtraInVCConnectionData:(id)arg1;
- (struct tagHANDLE *)extractVCChannelHandleFromVCConnectionData:(id)arg1;
- (int)initiateConferenceCallUsingConnectionDataWithErrorInfoToUser:(id)arg1 withRemoteVCConnectionData:(id)arg2 withLocalVCConnectionData:(id)arg3 oneWayOnly:(BOOL)arg4 errorInfo:(id *)arg5 shouldFindExternalIP:(BOOL)arg6;
- (void)initiateConferenceToUserWithVCConnectionDataProc:(id)arg1;
- (void)cacheConnectionData:(id)arg1 andCallID:(int)arg2;
- (void)VCChannelExtraPreparationProc:(id)arg1;
- (void)openNetworkMonitor;
- (void)closeNetworkMonitor;
- (void)registerForNetworkChanges;
- (id)localIPs;

@end

